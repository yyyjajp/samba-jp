<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="VFS">
<chapterinfo>
	&author.jelmer;
	&author.jht;
	&author.tpot;
	<author><firstname>Simo</firstname><surname>Sorce</surname><contrib>original vfs_skel README</contrib></author>
	<author><firstname>Alexander</firstname><surname>Bokovoy</surname><contrib>original vfs_netatalk docs</contrib></author>
	<author><firstname>Stefan</firstname><surname>Metzmacher</surname><contrib>Update for multiple modules</contrib></author>
	<author><firstname>Ed</firstname><surname>Riddle</surname><contrib>original shadow_copy docs</contrib></author>
</chapterinfo>
<title>スタッカブルVFSモジュール</title>

<sect1>
<title>機能と利便性</title>

<para>
<indexterm><primary>Virtual File System</primary><see>VFS</see></indexterm>
<indexterm><primary>modules</primary></indexterm>
<indexterm><primary>ロードされたモジュール</primary></indexterm>
Samba-3から、スタッカブルVFS(バーチャルファイルシステム)モジュールがサポートされる。
SambaはUNIXファイルシステムへのアクセスリクエストの一つ一つを、ロードされた
VFSモジュールに渡す。この章は、Sambaのソースに附属のモジュールについて説明すると同時に、
一部の外部モジュールについても言及する。
</para>


</sect1>

<sect1>
<title>議論</title>

<para>
<indexterm><primary>IRIX</primary></indexterm>
<indexterm><primary>GNU/Linux</primary></indexterm>
異なるシステムでは異なる方法で共用ライブラリーをコンパイルしリンクするので、これらの
モジュールが、プラットフォームディストリビューションのバイナリSambaパッケージと共に
供給されない場合、モジュールをコンパイルするのが困難になるかもしれない。これらの
モジュールは、GNU/Linux及びIRIXに関してテスト済みである。
</para>

<para>
<indexterm><primary>VFSモジュール</primary></indexterm>
<indexterm><primary>モジュール</primary></indexterm>
<indexterm><primary>recycle bin</primary></indexterm>
VFS モジュールを使用するには、以下の例に類似した共有を作成すること。重要なパラメータは、
一つ以上のVFSモジュールを名前順に一覧表示できる<smbconfoption name="vfs objects"/>
パラメータである。例えば、ファイルへのアクセスをすべてログに取り、削除されたファイルを
ゴミ箱に入れるには、<link linkend="vfsrecyc">VFSモジュールを使うsmb.confの例</link>を
参照のこと:
</para>

<example id="vfsrecyc">
<title>VFSモジュールを使うsmb.confの例</title>
<smbconfblock>
<smbconfsection name="[audit]"/>
<smbconfoption name="comment">Audited /data directory</smbconfoption>
<smbconfoption name="path">/data</smbconfoption>
<smbconfoption name="vfs objects">audit recycle</smbconfoption>
<smbconfoption name="writeable">yes</smbconfoption>
<smbconfoption name="browseable">yes</smbconfoption>
</smbconfblock>
</example>

<para>
<indexterm><primary>ウィルススキャナ</primary></indexterm>
<indexterm><primary>スキャナモジュール</primary></indexterm>
<indexterm><primary>recycle bin</primary></indexterm>
モジュールは指定された順に使用される。例えば、ウィルススキャナモジュールとごみ箱
モジュールを両方使用したいとする。この場合、ファイルに関して他のアクションが
取られる前に、最初にウィルスを検知するよう、ウィルススキャナモジュールを最初の
モジュールとし、このモジュールが最初に動くようにすべきである。
The modules are used in the order in which they are specified.  Let's say that you want to both have a virus
scanner module and a recycle bin module. It is wise to put the virus scanner module as the first one so that
it is the first to get run and may detect a virus immediately, before any action is performed on that file.
<smbconfoption name="vfs objects">vscan-clamav recycle</smbconfoption>
</para>

<para>
<indexterm><primary>/usr/local/samba/lib/vfs</primary></indexterm>
<indexterm><primary>/usr/lib/samba/vfs</primary></indexterm>
SambaはSambaをインストールしたサーバのrootディレクトリ中の<filename>/lib</filename>
からいくつかのモジュールをロードしようとする(通常は
<filename>/usr/lib/samba/vfs</filename>か<filename>/usr/local/samba/lib/vfs</filename>)。
</para>

<para>
<indexterm><primary>モジュール</primary></indexterm>
<indexterm><primary>VFS</primary></indexterm>
<indexterm><primary>複数のモジュール</primary></indexterm>
<indexterm><primary>複数のVFS</primary></indexterm>
いくつかのモジュールは同じ共有に対して二度使用できる。これは
<link linkend="multimodule">複数のVFSモジュールを使用するsmb.confの例</link>の
ような設定で可能となる。

<example id="multimodule">
<title>複数のVFSモジュールを使用するsmb.confの例</title>
<smbconfblock>
<smbconfsection name="[test]"/>
<smbconfoption name="comment">VFS TEST</smbconfoption>
<smbconfoption name="path">/data</smbconfoption>
<smbconfoption name="writeable">yes</smbconfoption>
<smbconfoption name="browseable">yes</smbconfoption>
<smbconfoption name="vfs objects">example:example1 example example:test</smbconfoption>
<smbconfoption name="example1: parameter">1</smbconfoption>
<smbconfoption name="example:  parameter">5</smbconfoption>
<smbconfoption name="test:     parameter">7</smbconfoption>
</smbconfblock>
</example>
</para>

</sect1>

<sect1>
<title>含まれるモジュール</title>

	<sect2>
	<title>audit</title>

		<para>
<indexterm><primary>ファイルアクセスの監査</primary></indexterm>
		syslog機能へのファイルアクセスを監査するシンプルなモジュールである。 以下の操作のログが取られる:
		<itemizedlist>
			<listitem><para>share</para></listitem>
			<listitem><para>connect/disconnect</para></listitem>
			<listitem><para>directory opens/create/remove</para></listitem>
			<listitem><para>file open/close/rename/unlink/chmod</para></listitem>
		</itemizedlist>
		</para>

	</sect2>

	<sect2>
	<title>default_quota</title>

	<para>
	このモジュールは、Samba-3サーバ上で格納される既定値のquota値を、Windowsのエクスプローラの
	GUI画面で設定できるようにする。この試みはLinuxファイルシステムでユーザとグループに対する
	quotaを格納する場合のみだが、それは既定値を持たない。
	</para>

	<para>
	Sambaは既定値としてNO_LIMITをquotaの既定値として返し、それは更新できない。このモジュールを
	使うと、ユーザに対するquotaレコード中でWindowsクライアントに表示される既定値のquota値を
	格納できる。既定値では、通常quota制限がrootには適用されないため、rootユーザが既定値として
	利用される。
	</para>

	<para>
	このモジュールには&smb.conf;ファイル中で2つのパラメータを設定する。おのおのの既定値の
	プレフィックスは<quote>default_quota</quote>である。これは、以下のようにして、
	<emphasis>vfs modules</emphasis>パラメータ中でモジュールをロードしたときに上書きできる:
<screen>
vfs objects = default_quota:myprefix
</screen>
	</para>

	<para>
	default_quotasモジュールに対して指定することが出来るパラメータのエントリは以下の通り:
	</para>

	<variablelist>
		<varlistentry>
            <term>myprefix:uid</term>
			<listitem><para>
			既定値のユーザquotaを格納するために使われるquotaレコードのためのuidを
			指定する整数値。
			</para>

			<para>
			既定値は0(ルートユーザ)。使用例は以下の通り:
<screen>
vfs objects = default_quota
default_quota:	uid = 65534
</screen>
			上記の例では<constant>myprefix</constant>が省略され、そのため、既定値の
			プレフィックスはモジュールの名前になる。<constant>myprefix</constant>
			パラメータが指定されると、上記は以下のように書き換えられる:
<screen>
vfs objects = default_quota:myprefix
myprefix:	uid = 65534
</screen>
			</para></listitem>
		</varlistentry>

		<varlistentry>
            <term>myprefix:uid nolimit</term>
			<listitem><para>
			既定値のquota値がユーザのレコードとしても表示される場合か、
			<constant>NO_LIMIT</constant>が、<parameter>prefix:uid</parameter>パラメータに
			よって指定されたユーザとしてWindowsクライアントに表示される場合、この
			パラメータは論理値となる。
			</para>

			<para>
			既定値は<constant>yes</constant>である(NO_LIMITが表示される)。使用例は以下の通り:
<screen>
vfs objects = default_quota:myprefix
myprefix:	uid nolimit = no
</screen>
			</para></listitem>
		</varlistentry>

		<varlistentry>
			<term>myprefix:gid</term>
			<listitem><para>
			このパラメータは<parameter>prefix>:uid</parameter>と同じように整数値を引数と
			して取るが、グループquotaであるところが違う。注意:グループquotaはWindows
			エクスプローラではサポートされていない。
			</para>

			<para>
			既定値は0である(rootグループ)。使用例は以下の通り:
<screen>
vfs objects = default_quota
default_quota:	gid = 65534
</screen>
			</para></listitem>
		</varlistentry>

		<varlistentry>
			<term>myprefix:gid nolimit</term>
			<listitem><para>
			このパラメータは、<parameter>prefix>:uid nolimit</parameter>と同じように
			真理値を取るが、グループquotaであることが違う。注意:グループquotaは
			Windowsエクスプローラではサポートされていない。
			</para>

			<para>
			既定値は<constant>yes</constant>(NO_LIMITが表示される)。使用例は以下の通り:
<screen>
vfs objects = default_quota
default_quota:	uid nolimit = no
</screen>
			</para></listitem>
		</varlistentry>
	</variablelist>

	<para>
	複数のパラメータを組み合わせた使用例は以下の通り:
<screen>
...
vfs objects = default_quota:quotasettings
quotasettings:	uid nolimit = no
quotasettings:	gid = 65534
quotasettings:	gid nolimit = no
...
</screen>
	</para>

	</sect2>

	<sect2>
	<title>extd_audit</title>

		<para>
<indexterm><primary>audit module</primary></indexterm>
<indexterm><primary>extd_audit module</primary></indexterm>
<indexterm><primary>smbd</primary></indexterm>
		このモジュールは上記の<command>audit</command>モジュールとほぼ同じで
		あるが、監査ログをsyslogと<command>smbd</command>のログファイルに送る
		事が異なる。このモジュールの<smbconfoption name="log level"/>は
		&smb.conf;ファイル中で設定する。
		</para>

		<para>
		有効な設定と記録される情報を<link linkend="xtdaudit">下記のテーブル</link>中に示す。
		</para>

		<table frame="all" id="xtdaudit">
			<title>拡張監査ログの情報内容</title>
		<tgroup cols="2" align="center">
			<thead>
			<row><entry align="center">ログレベル</entry><entry>ログ内容 - ファイルとディレクトリ操作</entry></row>
			</thead>
			<tbody>
			<row><entry align="center">0</entry><entry align="left">ディレクトリの作成、削除、Unlink</entry></row>
			<row><entry align="center">1</entry><entry align="left">ディレクトリのオープン/改名、ファイル名の変更、パーミッション/ACLの変更</entry></row>
			<row><entry align="center">2</entry><entry align="left">ファイルのオープン&amp;クローズ</entry></row>
			<row><entry align="center">10</entry><entry align="left">最大のデバッグレベル</entry></row>
			</tbody>
		</tgroup>
		</table>

		<sect3>
		<title>監査の設定</title>

		<para>
<indexterm><primary>logging</primary></indexterm>
		この監査ツールはたいていの人が容易に認知するよりもより自由度が高い。
		有用なログ情報を記録するためのいくつかの方法がある。
		</para>

		<itemizedlist>
			<listitem><para>すべてのトランザクションを記録するためにsyslogが使える。
					これは、&smb.conf;ファイル中に
					<parameter>syslog = 0</parameter>を設定することで無効に出来る。</para></listitem>
			<listitem><para>xがログレベルである<parameter>log level = 0 vfs:x</parameter>
					を&smb.conf;ファイル中に設定することによりすべてのロードされた
					VFSモジュールに対して既定値のログファイル
					(<filename>log.smbd</filename>)をログの出力として使える。これは、
					ログレベルで指定された、VFSモジュールの動作のすべてのログが
					有効になっているが、通常のログは無効にする。</para></listitem>
			<listitem><para>ユーザ単位、クライアントマシン単位などで詳細なログを取れる。
					これは、<parameter>log file</parameter>の特別な設定方法と
					上記を一緒にすることを要求する。</para>
					<para>ユーザ単位とマシン単位の詳細なログの例は、
					<smbconfoption name="log file">/var/log/samba/%U.%m.log</smbconfoption>
					のようにして行う。
					</para></listitem>
		</itemizedlist>

		<para>
		監査情報は、しばしば長い期間保存する必要はある。ログファイルがローテート
		されないように、&smb.conf;ファイル中で<smbconfoption name="max log size">0</smbconfoption>
		を設定するのは必須である。</para>

		</sect3>

	</sect2>

	<sect2 id="fakeperms">
	<title>fake_perms</title>

		<para>
<indexterm><primary>fake_perms</primary></indexterm>
<indexterm><primary>移動プロファイル</primary></indexterm>
<indexterm><primary>writeable</primary></indexterm>
<indexterm><primary>read only</primary></indexterm>
		このモジュールは、(UNIX配下のSambaサーバで)移動プロファイルのファイルと
		ディレクトリを読み込み専用に設定することができるようにするために作成
		された。 このモジュールは、プロファイル共有にインストールされている場合、
		プロファイルのファイルとディレクトリが書き込み可能であると、クライアントに
		通知する。これにより、クライアントがログアウトまたはシャットダウンした
		時に、ファイルを上書きしなくなるが、クライアントのニーズは充足する。
		</para>

	</sect2>

	<sect2>
	<title>recycle</title>

		<para>
<indexterm><primary>recycle</primary></indexterm>
<indexterm><primary>unlink calls</primary></indexterm>
<indexterm><primary>recycle directory</primary></indexterm>
		ゴミ箱と同様のモジュールである。 使用すると、unlinkシステムコールを
		横取り、ファイルを削除する代わりにゴミ箱ディレクトリに移動する。
		これはWindowsコンピュータにおける<guiicon>ゴミ箱</guiicon>の機能と
		同じである。
		</para>

		<para>
<indexterm><primary>recycle</primary></indexterm>
<indexterm><primary>.recycle</primary></indexterm>
<indexterm><primary>recycle:keeptree</primary></indexterm>
<indexterm><primary>deleted files</primary></indexterm>
		<guiicon>ごみ箱</guiicon>は、<application>Windows エクスプローラー<application>
		のネットワークファイルシステム(共有)のビューにも、マッピングされたドライブの
		いずれのビューにも表示されない。その代わりに、<filename>.recycle</filename>
		というディレクトリが、初めてファイルを削除したときと
		<parameter>recycle:repository</parameter>が設定されていないときに自動的に
		作成される。もし、<parameter>recycle:repository</parameter>が設定されている
		場合、作成されるディレクトリは<parameter>recycle:repository</parameter>に
		依存する。ユーザはごみ箱からファイルを取り戻すことが出来る。もしも、
		<parameter>recycle:keeptree</parameter>が指定されていた場合、
		削除されたファイルは、ファイルが削除された元の場所と同一のパスから、
		見つけることができる。
		</para>
		
		<para><command>recycle</command>がサポートするオプションは以下の通り:
		<variablelist>
			<varlistentry>
			<term>recycle:repository</term>
				<listitem><para>
<indexterm><primary>recycle:repository</primary></indexterm>
				削除されたファイルの移動先であるディレクトリのパス。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:directory_mode</term>
				<listitem><para>
<indexterm><primary>directory_mode</primary></indexterm>
				recycleディレクトリに設定したい8進のモードを指定する。
				もしも存在しないか、最初にファイルが削除された時、
				このモードでrecycleディレクトリが作成される。
				もしも、<parameter>recycle:subdir_mode</parameter>が
				設定されていない場合、それらのモードはサブディレクトリ
				にも適用される。もしも、
				<parameter>directory_mode</parameter>が設定されて
				いない場合、既定値として0700が使われる。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:subdir_mode</term>
				<listitem><para>
<indexterm><primary>recycle:subdir_mode</primary></indexterm>
				recycleディレクトリのサブディレクトリに設定したい
				8進のモードを指定する。このモードでサブディレクトリ
				が作成される。もしも、
				<parameter>recycle:subdir_mode</parameter>が
				設定されていない場合、サブディレクトリのモードは
				<parameter>directory_mode</parameter>のモードで
				作成される。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:keeptree</term>
				<listitem><para>
<indexterm><primary>recycle:keeptree</primary></indexterm>
				ディレクトリ構造を維持するか、あるいは削除された
				ファイルはゴミ箱に別に保存するかを指定する。
				</para></listitem>
			</varlistentry>
			
			<varlistentry>
			<term>recycle:versions</term>
				<listitem><para>
<indexterm><primary>recycle:versions</primary></indexterm>
				このオプションを設定すると、同名の二つのファイルが削除
				されたとき、 二つとも別のファイルとしてゴミ箱に保存する。
				より新しい方の削除ファイルは、
				<quote>Copy #x of <replaceable>filename</replaceable></quote>
				という名称で保存される。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:touch</term>
				<listitem><para>
<indexterm><primary>recycle:touch</primary></indexterm>
				ファイルがごみ箱に移されたときに、ファイルのアクセス
				日付を変更するかどうかを指定する。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:touch_mtime</term>
				<listitem><para>
<indexterm><primary>recycle:touch</primary></indexterm>
				ファイルがごみ箱に移されたときに、ファイルの最終変更
                                時刻を変更するかどうかを指定する
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:maxsize</term>
				<listitem><para>
<indexterm><primary>recycle:maxsize</primary></indexterm>
				このパラメータで指定したバイト数より大きいファイルは、
				ごみ箱に入れない。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:exclude</term>
				<listitem><para>
<indexterm><primary>recycle:exclude</primary></indexterm>
				ごみ箱に入れないで、普通に削除するべきファイルをリストする。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:exclude_dir</term>
				<listitem><para>
<indexterm><primary>recycle:exclude_dir</primary></indexterm>
				ディレクトリのリストを指定する。これらのディレクトリから
				ファイルが削除されると、ごみ箱には入れずに、普通に削除する。
				</para></listitem>
			</varlistentry>

			<varlistentry>
			<term>recycle:noversions</term>
				<listitem><para>
<indexterm><primary>recycle:noversions</primary></indexterm>
				recycle:versionsの反対である(*や?のワイルドカードもサポート)
				する。<emphasis>recycle:versions</emphasis>が有効な時に
				便利である。
				</para></listitem>
			</varlistentry>
		</variablelist>
		</para>

	</sect2>

	<sect2>
	<title>netatalk</title>

		<para>
<indexterm><primary>netatalk</primary></indexterm>
		netatalkモジュールは、Sambaとnetatalkのファイル共有サービスの共存を
		やり易くする。
		</para>

		<para>従前のnetatalkモジュールと比較した長所は以下の通り:
		<itemizedlist>
<indexterm><primary>.AppleDouble</primary></indexterm>
			<listitem><para>.AppleDouble フォークの作成を気にかけず、ただ同期を取る。</para></listitem>
			<listitem><para>&smb.conf;中の共有の「隠し(hide)」または「拒否(veto)」
			 リスト中に.AppleDoubleのアイテムを含まないとき、自動的に追加される。</para></listitem>
		</itemizedlist>
		</para>

	</sect2>

    <sect2>
      <title>shadow_copy</title>

	<warning><para>
<indexterm><primary>shadow_copy</primary></indexterm>
	<emphasis>これはバックアップでも、アーカイブでも、バージョンコントロールソリューションでもない!</emphasis>
	</para>

	<para>
<indexterm><primary>version control</primary></indexterm>
	SambaかWindowsサーバでは、shadow_copyはエンドユーザツールとしてのみ設計されて
	いる。バックアップやアーカイブソリューションの機能強化や置き換えにはならず、
	そのように考えてはいけない。更に、バージョンコントロール機能が必要な場合には、
	バージョンコントロールシステムを入れること。これは警告である。
	</para></warning>


	<para>
	shadow_copyモジュールはMicrosoftシャドーコピーサービスに似た機能を提供する。
	適切に設定された場合、Sambaの共有上で、Microsoftシャドーコピークライアントが
	"シャドーコピー"を見えるようにする。シャドーコピークライアントのインストール
	が必要である。Microsoftシャドーコピークライアントは
	<ulink noescape="1" url="http://www.microsoft.com/windowsserver2003/downloads/shadowcopyclient.mspx">ここ</ulink>
	から入手できる。Windows XPより前のクライアントには追加の要求があることに注意。
	この機能はWindows XPより前のバージョンではテストされていない。Microsoftシャドーコピー
	に関するより詳細な情報は、
	<ulink noescape="1" url="http://www.microsoft.com/windowsserver2003/techinfo/overview/scr.mspx">Microsoftのサイト</ulink>
	を参照のこと。
	</para>

	<para>
<indexterm><primary>shadow_copy</primary></indexterm>
<indexterm><primary>VFSモジュール</primary></indexterm>
<indexterm><primary>shadow_copyモジュール</primary></indexterm>
<indexterm><primary>LVM</primary></indexterm>
<indexterm><primary>EVMS</primary></indexterm>
<indexterm><primary>論理ボリュームマネージャ</primary><see>LVM</see></indexterm>
	shadow_copy VFSモジュールはLVM1、LVM2かEVMSのような、ある種の論理ボリューム
	マネージャ(LVM)でセットアップしたものがベースのファイルシステムを要求する。
	LVMの設定はこの文書の範囲外である。しかし、<emphasis>例としてのみ</emphasis>
	この機能をテストするために行う手順の概要を示す。使いたいとしているLVMの
	実装が使用対象に対して準備されているかを確かめる必要がある。十分にテストは
	されなければならない。
	</para>

	<para>
	以下は、LVMとEVMSに対するよく使われる情報源である:
	</para>

	<itemizedlist>
	  <listitem>
	    <para><ulink noescape="1"
	    url="http://www.sistina.com/products_lvm_download.htm">Sistinaの
	    LVM1と LVM2に関する情報</ulink></para>
	  </listitem>
	  <listitem>
	    <para><ulink url="http://evms.sourceforge.net/">Enterprise Volume Management System (EVMS)</ulink></para>
	  </listitem>
	  <listitem>
	    <para><ulink url="http://tldp.org/HOWTO/LVM-HOWTO/">The LVM HOWTO</ulink>
	    (訳注:日本語訳は<ulink url="http://www.linux.or.jp/JF/JFdocs/LVM-HOWTO.html">こちら</ulink>)</para>
	  </listitem>
	  <listitem>
	    <para>
	      See <ulink url="http://www-106.ibm.com/developerworks/linux/library/l-lvm/">Learning
	      Linux LVM, Part 1</ulink> and <ulink url="http://www-106.ibm.com/developerworks/library/l-lvm2.html">Learning
	      Linux LWM, Part 2</ulink> for Daniel Robbins' well-written, two part tutorial on Linux and LVM using LVM
	      source code and reiserfs.</para>
	  </listitem>
	</itemizedlist>

	<sect3>
	<title>Shadow Copy Setup</title>
	<para>
<indexterm><primary>XFS file system</primary></indexterm>
<indexterm><primary>Debian Sarge</primary></indexterm>
	At the time of this writing, not much testing has been done.  I tested the shadow copy VFS module with a
	specific scenario which was not deployed in a production environment, but more as a proof of concept.  The
	scenario involved a Samba-3 file server on Debian Sarge with an XFS file system and LVM1.  I do NOT recommend
	you use this as a solution without doing your own due diligence with regard to all the components presented
	here.  That said, following is an basic outline of how I got things going.
	</para>

	<orderedlist>
	  <listitem>
	    <formalpara><title>Installed Operating System </title> 
	    <para>
		In my tests, I used <ulink url="http://www.debian.org/devel/debian-installer/">Debian
		Sarge</ulink> (i.e., testing) on an XFS file system.  Setting up the OS is a bit beyond the scope of this
		document.  It is assumed that you have a working OS capable of running Samba.
		</para></formalpara>
	  </listitem>

	  <listitem>
	    <formalpara><title>Install &amp; Configure Samba</title>
		<para>
		See the <link linkend="introduction">installation section</link> of this HOWTO for more detail on this.
		It doesn't matter if it is a Domain Controller or Member File Server, but it is assumed that you have a
		working Samba 3.0.3 or later server running.
		</para></formalpara>
	  </listitem>

	  <listitem>
	    <formalpara><title>Install &amp; Configure LVM</title>
		<para>
<indexterm><primary>shadow copies</primary></indexterm>
<indexterm><primary>Snapshots</primary></indexterm>
		Before you can make shadow copies available to the client, you have to create the shadow copies.  This is
		done by taking some sort of file system snapshot.  Snapshots are a typical feature of Logical Volume
		Managers such as LVM, so we first need to have that setup.
		</para></formalpara>

	    <itemizedlist>
		<para>
		The following is provided as an example and will be most helpful for Debian users.  Again, this was tested
		using the "testing" or "Sarge" distribution.
		</para>

			<listitem>
			<para>
<indexterm><primary>lvm10 package</primary></indexterm>
<indexterm><primary>devfsd package</primary></indexterm>
<indexterm><primary>Debian</primary></indexterm>
<indexterm><primary>xfsprogs</primary></indexterm>
<indexterm><primary>apt-get</primary></indexterm>
			Install lvm10 and devfsd packages if you have not done so already.  On Debian systems, you are warned of the
			interaction of devfs and lvm1 which requires the use of devfs filenames.  Running <command>apt-get update
			&amp;&amp; apt-get install lvm10 devfsd xfsprogs</command> should do the trick for this example.
			</para></listitem>

			<listitem><para>
<indexterm><primary>create volume</primary></indexterm>
<indexterm><primary>create partition</primary></indexterm>
<indexterm><primary>fdisk</primary></indexterm>
<indexterm><primary>cfdisk</primary></indexterm>
<indexterm><primary>Linux LVM</primary></indexterm>
			Now you need to create a volume.  You will need to create a partition (or partitions) to add to your volume.
			Use your favorite partitioning tool (e.g., Linux fdisk, cfdisk, etc.).  The partition type should be set to
			0x8e for "Linux LVM."  In this example, we will use /dev/hdb1.
			</para>

			<para>
<indexterm><primary>Linux LVM partition</primary></indexterm>
<indexterm><primary>LVM volume</primary></indexterm>
<indexterm><primary>modprobe</primary></indexterm>
			Once you have the Linux LVM partition (type 0x8e), you can run a series of commands to create the LVM volume.
			You can use several disks and/or partitions, but we will use only one in this example.  You may also need to
			load the kernel module with something like <command>modprobe lvm-mod</command> and set your system up to load
			it on reboot by adding it to (<filename>/etc/modules</filename>).
			</para></listitem>

			<listitem><para>
<indexterm><primary>pvcreate</primary></indexterm>
			Create the physical volume with <command>pvcreate /dev/hdb1</command>
			</para></listitem>

			<listitem><para>
<indexterm><primary>vgcreate</primary></indexterm>
<indexterm><primary>volume group</primary></indexterm>
			Create the volume group and add /dev/hda1 to it with <command>vgcreate shadowvol /dev/hdb1</command>
			</para>

			<para>
<indexterm><primary>vgdisplay</primary></indexterm>
			You can use <command>vgdisplay</command> to review information about the volume group.
			</para></listitem>

			<listitem><para>
<indexterm><primary>lvcreate</primary></indexterm>
			Now you can create the logical volume with something like <command>lvcreate -L400M -nsh_test shadowvol</command>
			</para>

			<para>
<indexterm><primary>/dev/shadowvol</primary></indexterm>
			This creates the logical volume of 400 MBs named "sh_test" in the volume group we created called shadowvol.
			If everything is working so far, you should see them in <filename>/dev/shadowvol</filename>.
			</para></listitem>

			<listitem><para>
<indexterm><primary>mkfs.xfs</primary></indexterm>
			Now we should be ready to format the logical volume we named sh_test with <command>mkfs.xfs
			/dev/shadowvol/sh_test</command>
			</para>

			<para>
<indexterm><primary>logical volume</primary></indexterm>
<indexterm><primary>LVM</primary></indexterm>
<indexterm><primary>freezing</primary></indexterm>
<indexterm><primary>resizing</primary></indexterm>
<indexterm><primary>growing</primary></indexterm>
			You can format the logical volume with any file system you choose, but make sure to use one that allows you to
			take advantage of the additional features of LVM such as freezing, resizing, and growing your file systems.
			</para>

			<para>
<indexterm><primary>LVM volume</primary></indexterm>
<indexterm><primary>shadow_copy</primary></indexterm>
<indexterm><primary>module</primary></indexterm>
			Now we have an LVM volume where we can play with the shadow_copy VFS module.
			</para></listitem>

			<listitem><para>
<indexterm><primary>mkdir</primary></indexterm>
<indexterm><primary>permissions</primary></indexterm>
<indexterm><primary>chmod</primary></indexterm>
			Now we need to prepare the directory with something like
<screen>
&rootprompt; mkdir -p /data/shadow_share
</screen>
			or whatever you want to name your shadow copy-enabled Samba share.  Make sure you set the permissions so that
			you can use it.  If in doubt, use <command>chmod 777 /data/shadow_share</command> and tighten the permissions
			once you get things working.
			</para></listitem>

			<listitem><para>
<indexterm><primary>mount</primary></indexterm>
			Mount the LVM volume using something like <command>mount /dev/shadowvol/sh_test /data/shadow_share</command>
			</para>

			<para>
<indexterm><primary>/etc/fstab</primary></indexterm>
			You may also want to edit your <filename>/etc/fstab</filename> so that this partition mounts during the system boot.
			</para></listitem>
		</itemizedlist>

		</listitem>

	  <listitem>
	    <formalpara><title>Install &amp; Configure the shadow_copy VFS Module</title>
		<para>
		Finally we get to the actual shadow_copy VFS module.  The shadow_copy VFS module should be available in Samba
		3.0.3 and higher.  The smb.conf configuration is pretty standard.  Here is our example of a share configured
		with the shadow_copy VFS module:
		</para></formalpara>

		<example id="vfsshadow">
		<title>Share With shadow_copy VFS</title>
		<smbconfblock>
		<smbconfsection name="[shadow_share]"/>
		<smbconfoption name="comment">Shadow Copy Enabled Share</smbconfoption>
		<smbconfoption name="path">/data/shadow_share</smbconfoption>
		<smbconfoption name="vfs objects">shadow_copy</smbconfoption>
		<smbconfoption name="writeable">yes</smbconfoption>
		<smbconfoption name="browseable">yes</smbconfoption>
		</smbconfblock>
		</example>

		</listitem>

		<listitem>
	    <formalpara><title>Create Snapshots and Make Them Available to shadow_copy.so</title> 
		<para>
<indexterm><primary>shadow_copy</primary></indexterm>
<indexterm><primary>LVM snapshots</primary></indexterm>
<indexterm><primary>module</primary></indexterm>
		Before you can browse the shadow copies, you must create them and mount them.  This will most likely be done
		with a script that runs as a cron job.  With this particular solution, the shadow_copy VFS module is used to
		browse LVM snapshots.  Those snapshots are not created by the module.  They are not made available by the
		module either.  This module allows the shadow copy-enabled client to browse the snapshots you take and make
		available.
		</para></formalpara>

	    <para>
		Here is a simple script used to create and mount the snapshots:
<screen>
#!/bin/bash
# This is a test, this is only a test
SNAPNAME=`date +%Y.%m.%d-%H.%M.%S`
xfs_freeze -f /data/shadow_share/
lvcreate -L10M -s -n $SNAPNAME /dev/shadowvol/sh_test
xfs_freeze -u /data/shadow_share/
mkdir /data/shadow_share/@GMT-$SNAPNAME
mount /dev/shadowvol/$SNAPNAME \
       /data/shadow_share/@GMT-$SNAPNAME -onouuid,ro
</screen>
		Note that the script does not handle other things like remounting snapshots on reboot.
	    </para></listitem>

		<listitem>
	    <formalpara><title>Test From Client</title>
		<para>
		To test, you will need to install the shadow copy client which you can obtain from the <ulink
		url="http://www.microsoft.com/windowsserver2003/downloads/shadowcopyclient.mspx">Microsoft web site.</ulink> I
		only tested this with an XP client so your results may vary with other pre-XP clients.  Once installed, with
		your XP client you can right-click on specific files or in the empty space of the shadow_share and view the
		"properties."  If anything has changed, then you will see it on the "Previous Versions" tab of the properties
		window.
		</para></formalpara>
	  </listitem>
	</orderedlist>

	</sect3>
</sect2>

</sect1>

<sect1>
<title>VFS Modules Available Elsewhere</title>

<para>
<indexterm><primary>VFS modules</primary></indexterm>
This section contains a listing of various other VFS modules that have been posted but do not currently reside
in the Samba CVS tree for one reason or another (e.g., it is easy for the maintainer to have his or her own
CVS tree).
</para>

<para>
No statements about the stability or functionality of any module should be implied due to its presence here.
</para>

<sect2>
<title>DatabaseFS</title>

<para>
<indexterm><primary>DatabaseFS</primary></indexterm>
URL: <ulink noescape="1" url="http://www.css.tayloru.edu/~elorimer/databasefs/index.php">
Taylors University DatabaeFS</ulink>
</para>

<para>By <ulink url="mailto:elorimer@css.tayloru.edu">Eric Lorimer.</ulink></para>

<para>
I have created a VFS module that implements a fairly complete read-only filesystem. It presents information
from a database as a filesystem in a modular and generic way to allow different databases to be used.
(Originally designed for organizing MP3s under directories such as <quote>Artists,</quote> <quote>Song
Keywords,</quote> and so on. I have since easily applied it to a student roster database.) The directory
structure is stored in the database itself and the module makes no assumptions about the database structure
beyond the table it requires to run.
</para>

<para>
Any feedback would be appreciated: comments, suggestions, patches, and so on. If nothing else, it
might prove useful for someone else who wishes to create a virtual filesystem.
</para>

</sect2>

<sect2>
<title>vscan</title>

<indexterm><primary>vscan</primary></indexterm>
<para>URL: <ulink noescape="1" url="http://www.openantivirus.org/projects.php#samba-vscan">
Open Anti-Virus vscan</ulink>
</para>

<para>
<indexterm><primary>samba-vscan</primary></indexterm>
samba-vscan is a proof-of-concept module for Samba, which provides on-access anti-virus support for files
shared using Samba.  samba-vscan supports various virus scanners and is maintained by Rainer Link.
</para>

</sect2>

<sect2>
<title>vscan-clamav</title>
<para>
Samba users have been using the RPMS from SerNet without a problem.
OpenSUSE Linux users have also used the vscan scanner for quite some time
with excellent results. It does impact overall write performance though.
</para>

<para>
The following share stanza is a good guide for those wanting to configure vscan-clamav:
</para>

<screen>
[share]
vfs objects = vscan-clamav
vscan-clamav: config-file = /etc/samba/vscan-clamav.conf
</screen>

<para>
The following example of the <filename>vscan-clamav.conf</filename> file may help to get this
fully operational:
</para>

<screen>
<title>VFS: Vscan ClamAV Control File</title>
#
# /etc/samba/vscan-clamav.conf
#

[samba-vscan]
; run-time configuration for vscan-samba using
; clamd
; all options are set to default values

; do not scan files larger than X bytes. If set to 0 (default),
; this feature is disable (i.e. all files are scanned)
max file size = 10485760

; log all file access (yes/no). If set to yes, every access will
; be logged. If set to no (default), only access to infected files
; will be logged
verbose file logging = no

; if set to yes (default), a file will be scanned while opening
scan on open = yes
; if set to yes, a file will be scanned while closing (default is yes)
scan on close = yes

; if communication to clamd fails, should access to file denied?
; (default: yes)
deny access on error = no

; if daemon failes with a minor error (corruption, etc.),
; should access to file denied?
; (default: yes)
deny access on minor error = no

; send a warning message via Windows Messenger service
; when virus is found?
; (default: yes)
send warning message = yes

; what to do with an infected file
; quarantine: try to move to quantine directory
; delete:     delete infected file
; nothing:    do nothing (default)
infected file action = quarantine

; where to put infected files - you really want to change this!
quarantine directory  = /opt/clamav/quarantine
; prefix for files in quarantine
quarantine prefix = vir-

; as Windows tries to open a file multiple time in a (very) short time
; of period, samba-vscan use a last recently used file mechanism to avoid
; multiple scans of a file. This setting specified the maximum number of
; elements of the last recently used file list. (default: 100)
max lru files entries = 100

; an entry is invalidad after lru file entry lifetime (in seconds).
; (Default: 5)
lru file entry lifetime = 5

; exclude files from being scanned based on the MIME-type! Semi-colon
; seperated list (default: empty list). Use this with care!
exclude file types =

; socket name of clamd (default: /var/run/clamd). Setting will be ignored if
; libclamav is used
clamd socket name = /tmp/clamd

; limits, if vscan-clamav was build for using the clamav library (libclamav)
; instead of clamd

; maximum number of files in archive (default: 1000)
libclamav max files in archive = 1000

; maximum archived file size, in bytes (default: 10 MB)
libclamav max archived file size = 5242880

; maximum recursion level (default: 5)
libclamav max recursion level = 5
</screen>

<para>
Obviously, a running clam daemon is necessary for this to work. This is a working example for me using ClamAV.
The ClamAV documentation should provide additional configuration examples. On your system these may be located
under the <filename>/usr/share/doc/</filename> directory. Some examples may also target other virus scanners,
any of which can be used.
</para>

</sect2>
</sect1>

</chapter>
