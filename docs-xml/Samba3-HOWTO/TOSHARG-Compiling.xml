<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="compiling">
<chapterinfo>
	&author.jelmer;
	&author.jht;
	&author.tridge;
	
	<pubdate> 22 May 2001 </pubdate>
	<pubdate> 18 March 2003 </pubdate>
	<pubdate> June 2005 </pubdate>
</chapterinfo>

<title>Sambaのコンパイル方法</title>

<para>
<ulink url="http://samba.org/">Samba Web site</ulink>からSambaソースファイルを
入手できる。開発バージョンのSambaは、Subversionか<command>rsync</command>を使って
入手できる(訳注:現在はgit)。
</para>

<sect1>
<title>Subversion経由でのSambaソースコードへのアクセス</title>


<sect2>
<title>概要</title>

<para>
<indexterm><primary>Subversion</primary></indexterm>
(訳注:この節は現在古くなっている)
Sambaは公開された環境で開発されている。開発者はSubversionを使って、新しい
ソースコードを<quote>checkin</quote>(<quote>commit</quote>としても知られる)
する。Sambaの種々のSubversionブランチはこの章で説明される手順で匿名
Subversion経由でアクセスできる。
</para>

<para>
この章は、<ulink noescape="1" url="http://samba.org/samba/subversion.html">Samba</ulink>
Webサイトにある手順を変更したものである。
</para>

</sect2>

<sect2>
<title>samba.orgへのSubversionアクセス</title>

<para>
samba.orgのマシンはSamba,rsync,distcc, ccacheとjitterbugを含むいくつかのパッケージの
ソースコードへアクセスできるSubversionリポジトリに自由にアクセスできるサーバを動かして
いる。このホスト上のSubversionサーバにアクセスするには2つの方法がある。
</para>

<sect3>
<title>ViewCVS経由のアクセス</title>


<para>
<indexterm><primary>SVN</primary><secondary>web</secondary></indexterm>
お好みのWWWブラウザ経由でソースコードにアクセスできる。これにより、リポジトリの
個別のファイルの内容、リビジョン履歴、特定のファイルに対するコミットログに
アクセスできる。リポジトリ上の任意の2つのバージョン間での差分表示を得ることもできる。
</para>

<para>
<ulink noescape="1" url="http://viewcvs.samba.org/">http://viewcvs.samba.org/</ulink>
を使うこと。
</para>
</sect3>

<sect3>
<title>Subversion経由でのアクセス</title>

<para>
<indexterm><primary>Subversion</primary></indexterm>
通常のSubversionクライアント経由でソースコードにアクセスすることもできる。そうすると、
リポジトリに対してより多くの制御ができ、完全なソースコードツリーをチェックアウトでき、
通常のSubversionコマンド経由で最新版に追従できる。もしもあなたが開発者であれば、
これは好ましいアクセス方法であり、通常のブラウザは好ましくない。
</para>

<para>SubversionでSambaのソースをダウンロードできるように、するためには、Subversion
クライアントが必要である。使用しているディストリビューションに入っているかもしれないし、
そうでなければ、
<ulink noescape="1" url="http://subversion.tigris.org/">http://subversion.tigris.org/</ulink>
からソースをダウンロードできる。
</para>

<para>
匿名Subversion経由でアクセスするためには、以下のステップを使う。
</para>

<procedure>
	<title>Subversionを使うSambaの検索</title>

	<step>
	<para>
	最新のSubversionのコピーをインストールする。必要なものすべては、
	Subversionクライアントバイナリのコピーである。
	</para>
	</step>

	<step>
	<para>
	以下のコマンドを動かす
	<screen>
	<userinput>svn co svn://svnanon.samba.org/samba/trunk samba</userinput>.
	</screen>
	</para>
	
	<para>
	これは、最新のSambaソースコード(通常次のメジャーリリースになるブランチ)を含む、
	<filename>samba</filename>と呼ばれるディレクトリを作成する。これは現在
	3.1開発ツリーに連動している。
	</para>
	
	<para>
	trunk以外のSubversionブランチは、チェックアウトするときに、branches/BRANCH_NAME
	というURLによって得られる。ブランチ名の一覧は、Samba Webサイトの
	<quote>Development</quote>のページから得られる。最新の3.0リリースコードを得たい
	という共通の要求がある。これは以下のコマンドを使うことによってできる:
	<screen>
	<userinput>svn co svn://svnanon.samba.org/samba/branches/SAMBA_3_0 samba_3</userinput>.
	</screen>
	</para>
	</step>

	<step>
	<para>
	最新のコードの変更にマージしたい場合は、Sambaディレクトリ内で以下のコマンドを使う:
	<screen>
	<userinput>svn update</userinput>
	</screen>
	</para>
	</step>
</procedure>
	
</sect3>
</sect2>

</sect1>

<sect1>
	<title>rsyncとftp経由によるSambaソースへのアクセス</title>


	<para>
	<indexterm><primary>rsync</primary></indexterm>
	<indexterm><primary>ftp</primary></indexterm>
	<parameter>pserver.samba.org</parameter>も、
	<ulink noescape="1" url="ftp://pserver.samba.org/pub/unpacked">pserver</ulink>
	というSambaのサイトの所から、Subversionツリーのほとんどの部分のパックされてない
	コピーをエクスポートでき、また、
	<ulink noescape="1" url="rsync://pserver.samba.org/ftp/unpacked/">rsync</ulink>
	という、Sambaの匿名rsyncサーバ経由でも同じようにできる。ftpよりはrsyncの方が、
	rsyncはデータを圧縮転送できるのでお勧めであり、また、抜けているデータのみを
	転送出来るという、部分更新が出来て、オーバヘッドが少ないという点でもお勧めで
	ある。rsyncについてのより詳細な情報は、
	<ulink noescape="1" url="http://rsync.samba.org/">the rsync home page</ulink>
	を参照のこと。
	</para>

	<para>
	アンパックされたツリーの欠点は、Subversionのように、ローカルな変更の自動マージを
	サポートしないと言うことである。<command>rsync</command>によるアクセスは、
	初期導入に最も便利である。
	</para>
</sect1>

<sect1>
<title>SambaのPGP署名の検証</title>

<para>
<indexterm><primary>GPG</primary></indexterm>
<indexterm><primary>PGP</primary></indexterm>
インストールする前に、任意のソースファイルのPGP署名を検証することを強く推奨する。
ミラーサイトからダウンロードしていないとしても、PGP署名の検証は、標準的な習慣と
すべきである。多くの人は現在PGPの代替としてGNU GPGツールを使っている。GPGは
PGPの代わりとして使える。
</para>


<para>
そんなわけで、以下のようにしてファイルをダウンロードする:
</para>

<para><screen>
&prompt;<userinput>wget http://us1.samba.org/samba/ftp/samba-3.0.20.tar.asc</userinput>
&prompt;<userinput>wget http://us1.samba.org/samba/ftp/samba-pubkey.asc</userinput>
</screen></para>


<para>
<indexterm><primary>PGP</primary></indexterm>
最初のファイルはSambaソースファイルのPGP署名である。もう1つはSambaの公開PGPキーそれ自身
である。以下のようにしてPGPキーをインポートする:
<screen>
&prompt;<userinput>gpg --import samba-pubkey.asc</userinput>
</screen>
そして、Sambaソースコードの正当性を以下のようにして検査する:
<screen>
&prompt;<userinput>gzip -d samba-3.0.20.tar.gz</userinput>
&prompt;<userinput>gpg --verify samba-3.0.20.tar.asc</userinput>
</screen>
</para>

<para>
もしも、<quote>Good signature from Samba Distribution Verification Key...,</quote>
というようなメッセージが表示されたならば、すべて問題はない。信頼性の関係についての
警告は無視して良い。以下のような表示が出たら問題である:
<screen>
gpg: BAD signature from <quote>Samba Distribution Verification Key</quote>
</screen>
</para>

</sect1>

<sect1>
	<title>バイナリの構築</title>
	
	<para>
	<indexterm><primary>autogen.sh</primary></indexterm>
<indexterm><primary>configure</primary></indexterm>
	tar形式のソースコードを展開後、次のステップは、使用しているOSプラットフォームに
	Sambaが適合するように、設定(configuration)を行う。もしもソースディレクトリが
	<command>configure</command>スクリプトを含んでいないのであれば、以降を行う
	ために、構築作業が必要である。configureスクリプトの構築はautoconfの正しい
	バージョンが必要である。ど必要とされるバージョンのautoconfがある場合、
	以下を実行して生成されるスクリプトでconfigureスクリプトを生成できる。
<screen>
&rootprompt; cd samba-3.0.20/source
&rootprompt; ./autogen.sh
</screen>
	</para>
	

	<para>
	<indexterm><primary>configure</primary></indexterm>
	バイナリを構築するためには、ソースディレクトリ中で、
	<userinput>./configure</userinput>プログラムを動かす。これは、使用している
	OS用にSambaを自動的に設定する。もしも特別な要求があるならば、最初に
	以下のように起動しても良いだろう:
<screen>
&rootprompt;<userinput>./configure --help</userinput>
</screen>
</para>
	
	<para>
	これは、どのような特別なオプションが有効に出来るかの一覧を表示する。その後、
	必要な任意の引数を付けて、<userinput>./configure</userinput>を実行する:
<screen>
&rootprompt;<userinput>./configure <replaceable>[... arguments ...]</replaceable></userinput>
</screen>
	</para>
	
	<para>
	<indexterm><primary>make</primary></indexterm>
	以下を実行して、バイナリを生成する:
<screen>
&rootprompt; <userinput>make</userinput>
</screen>
	一度コンパイルが成功すると、以下のようなコマンドを実行することで、
	バイナリとマニュアルページをインストールできる:
<screen>
&rootprompt; <userinput>make install</userinput>
</screen>
	</para>
	
	<para>
	ある人は、バイナリファイルとマニュアルページを分離してインストールすることを
	好んでいる。もしもそうしたいのであれば、以下を実行することで、バイナリファイルを
	インストールできる:
<screen>
&rootprompt; <userinput>make installbin</userinput>
</screen>
	マニュアルページは以下のコマンドでインストールできる:
<screen>
&rootprompt; <userinput>make installman</userinput>
</screen>
	</para>

	<para>
	もしも、以前のバージョンからアップグレードするのであれば、古いバージョンの
	バイナリは<quote>.old</quote>という拡張子を付けて改名される。
	以下を実行することで、前のバージョンに戻ることが出来る:
<screen>
&rootprompt; <userinput>make revert</userinput>
</screen>
	上記を見て分かるとおり、Sambaの構築とインストールは災難を引き起こす事はない!
	</para>
	

	<sect2>
	<title>Active Directoryサポートを伴うSambaのコンパイル</title>
	
	<para>
	In order to compile Samba with ADS support, you need to have installed
	on your system:
	</para>

	<itemizedlist>
	
	    <listitem><para>
		The MIT or Heimdal Kerberos development libraries
	    (either install from the sources or use a package).
		</para></listitem>
	
	    <listitem><para>
		The OpenLDAP development libraries.
		</para></listitem>
	    
	</itemizedlist>

	<para>
	If your Kerberos libraries are in a nonstandard location, then
	remember to add the configure option
	<option>--with-krb5=<replaceable>DIR</replaceable></option>.
	</para>

	<para>
	After you run configure, make sure that the 
	<filename>include/config.h</filename> it generates contain lines like this:
<programlisting>
#define HAVE_KRB5 1
#define HAVE_LDAP 1
</programlisting>
	</para>

	<para>
	If it does not, configure did not find your KRB5 libraries or
	your LDAP libraries. Look in <filename>config.log</filename> to figure
	out why and fix it.
	</para>

	<sect3>
	<title>Installing the Required Packages for Debian</title>

	<para>On Debian, you need to install the following packages:</para>
	<para>
		<itemizedlist>
			<listitem><para>libkrb5-dev</para></listitem>
			<listitem><para>krb5-user</para></listitem>
		</itemizedlist>
	</para>
	</sect3>

	<sect3>
	<title>Installing the Required Packages for Red Hat Linux</title>

	<para>On Red Hat Linux, this means you should have at least: </para>
	<para>
		<itemizedlist>
			<listitem><para>krb5-workstation (for kinit)</para></listitem>
			<listitem><para>krb5-libs (for linking with)</para></listitem>
			<listitem><para>krb5-devel (because you are compiling from source)</para></listitem>
		</itemizedlist>
	</para>

	<para>in addition to the standard development environment.</para>

	<para>If these files are not installed on your system, you should check the installation
	CDs to find which has them and install the files using your tool of choice. If in doubt
	about what tool to use, refer to the Red Hat Linux documentation.</para>

	</sect3>

	<sect3>
	<title>SuSE Linux Package Requirements</title>

	<para>
	SuSE Linux installs Heimdal packages that may be required to allow you to build
	binary packages. You should verify that the development libraries have been installed on
	your system.
	</para>

	<para>
	SuSE Linux Samba RPMs support Kerberos. Please refer to the documentation for
	your SuSE Linux system for information regarding SuSE Linux specific configuration.
	Additionally, SuSE is very active in the maintenance of Samba packages that provide
	the maximum capabilities that are available. You should consider using SuSE-provided
	packages where they are available.
	</para>

	</sect3>
	
	</sect2>
			  
</sect1>

<sect1 id="startingSamba">
	<title>Starting the &smbd; &nmbd; and &winbindd;</title>


	<para>
	<indexterm><primary>inetd</primary></indexterm>
	You must choose to start &smbd;, &winbindd;  and &nmbd; either as daemons or from
	<application>inetd</application>. Don't try to do both!  Either you can put
	them in <filename> inetd.conf</filename> and have them started on demand by
	<application>inetd</application> or <application>xinetd</application>, or you
	can start them as daemons either from the command-line or in
	<filename>/etc/rc.local</filename>. See the man pages for details on the
	command line options. Take particular care to read the bit about what user
	you need to have to start Samba. In many cases, you must be root.
	</para>

	<para>
	The main advantage of starting &smbd; and &nmbd; using the recommended daemon method
	is that they will respond slightly more quickly to an initial connection request.
	</para>

	<sect2>
	<title>Starting from inetd.conf</title>

	<indexterm><primary>inetd</primary></indexterm>
	
	<note>
	<para>The following will be different if 
	you use NIS, NIS+, or LDAP to distribute services maps.</para>
	</note>
	
	<para>Look at your <filename>/etc/services</filename>. 
	What is defined at port 139/tcp? If nothing is defined, 
	then add a line like this:</para>

	<para><programlisting>netbios-ssn     139/tcp</programlisting></para>

	<para>Similarly for 137/udp, you should have an entry like:</para>

	<para><programlisting>netbios-ns	137/udp</programlisting></para>

	<para>
	Next, edit your <filename>/etc/inetd.conf</filename> and add two lines like this:
<programlisting>
netbios-ssn stream tcp nowait root /usr/local/samba/sbin/smbd smbd 
netbios-ns dgram udp wait root /usr/local/samba/sbin/nmbd nmbd 
</programlisting>
	</para>

<indexterm><primary>/etc/inetd.conf</primary></indexterm>
	<para>
	The exact syntax of <filename>/etc/inetd.conf</filename> 
	varies between UNIXes. Look at the other entries in inetd.conf 
	for a guide.
	</para>

	<para>
	<indexterm><primary>xinetd</primary></indexterm>
	Some distributions use xinetd instead of inetd. Consult the 
	xinetd manual for configuration information.
	</para>

	<note><para>Some UNIXes already have entries like netbios_ns 
	(note the underscore) in <filename>/etc/services</filename>. 
	You must edit <filename>/etc/services</filename> or
	<filename>/etc/inetd.conf</filename> to make them consistent.
	</para></note>

	<note><para>
	<indexterm><primary>ifconfig</primary></indexterm>
	On many systems you may need to use the
	<smbconfoption name="interfaces"/> option in &smb.conf; to specify
	the IP address and netmask of your interfaces. Run 
	<application>ifconfig</application> as root if you do
	not know what the broadcast is for your net. &nmbd; tries
	to determine it at runtime, but fails on some UNIXes. 
	</para></note>

	<warning><para>
	Many UNIXes only accept around five parameters on the command
	line in <filename>inetd.conf</filename>.  This means you shouldn't
	use spaces between the options and arguments, or you should use
	a script and start the script from <command>inetd</command>.
	</para></warning>

	<para>
	Restart <application>inetd</application>, perhaps just send it a HUP,
	like this:
<indexterm><primary>killall</primary></indexterm>
<screen>
&rootprompt;<userinput>killall -HUP inetd</userinput>
</screen>
	</para>
		
	</sect2>
	
	<sect2>
	<title>Alternative: Starting &smbd; as a Daemon</title>
		
	<para>
	<indexterm><primary>daemon</primary></indexterm>
<indexterm><primary>startsmb</primary></indexterm>
	To start the server as a daemon, you should create a script something
	like this one, perhaps calling it <filename>startsmb</filename>.
	</para>

<para><programlisting>
#!/bin/sh
/usr/local/samba/sbin/smbd -D
/usr/local/samba/sbin/winbindd -D
/usr/local/samba/sbin/nmbd -D
</programlisting></para>

	<para>
	Make it executable with <command>chmod +x startsmb</command>.
	</para>

	<para>
	You can then run <command>startsmb</command> by hand or execute
	it from <filename>/etc/rc.local</filename>.
	</para>

	<para>
	To kill it, send a kill signal to the processes &nmbd; and &smbd;.
	</para>

	<note><para>
	If you use the SVR4-style init system, you may like to look at the
	<filename>examples/svr4-startup</filename> script to make Samba fit
	into that system.
	</para></note>

	<sect3>
	<title>Starting Samba for Red Hat Linux</title>

	<para>
	Red Hat Linux has not always included all Samba components in the standard installation.
	So versions of Red Hat Linux do not install the winbind utility, even though it is present
	on the installation CDROM media. Check to see if the <command>winbindd</command> is present
	on the system:
<screen>
&rootprompt; ls /usr/sbin/winbindd
/usr/sbin/winbindd
</screen>
	This means that the appropriate RPM package was installed. The following response means
	that it is not installed:
<screen>
/bin/ls: /usr/sbin/winbind: No such file or directory
</screen>
	In this case, it should be installed if you intend to use <command>winbindd</command>. Search
	the CDROM installation media for the samba-winbind RPM and install it following Red Hat
	guidelines.
	</para>

	<para>
	The process for starting Samba will now be outlined. Be sure to configure Samba's &smb.conf;
	file before starting Samba. When configured, start Samba by executing:
<screen>
&rootprompt; service smb start
&rootprompt; service winbind start
</screen>
	These steps will start &nmbd;, &smbd; and &winbindd;.
	</para>

	<para>
	To ensure that these services will be automatically restarted when the system is rebooted
	execute:
<screen>
&rootprompt; chkconfig smb on
&rootprompt; chkconfig winbind on
</screen>
	Samba will be started automatically at every system reboot.
	</para>

	</sect3>

	<sect3>
	<title>Starting Samba for Novell SUSE Linux</title>

	<para>
	Novell SUSE Linux products automatically install all essential Samba components in a default installation.
	Configure your &smb.conf; file, then execute the following to start Samba:
<screen>
&rootprompt; rcnmb start
&rootprompt; rcsmb start
&rootprompt; rcwinbind start
</screen>
	Now execute these commands so that Samba will be started automatically following a system
	reboot:
<screen>
&rootprompt; chkconfig nmb on
&rootprompt; chkconfig smb on
&rootprompt; chkconfig winbind on
</screen>
	The Samba services will now be started automatically following a system reboot.
	</para>

	</sect3>

	</sect2>

</sect1>

</chapter>
