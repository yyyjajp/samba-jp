<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="pam">
<chapterinfo>
	&author.jht;
	<author>
		<firstname>Stephen</firstname><surname>Langasek</surname>
		<affiliation>
			<address><email>vorlon@netexpress.net</email></address>
		</affiliation>
	</author>
    <pubdate>May 31, 2003</pubdate>
</chapterinfo>
 
<title>PAM ベースの分散型認証</title>

<para>
<indexterm><primary>PAM が利用可能</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>ADS</primary></indexterm>
<indexterm><primary>Winbindベースの認証</primary></indexterm>
この章は、何らかの PAM が利用できる UNIX/Linux システムに対して Winbind
ベースの認証を導入する際の助けになるだろう。Winbind を使うと、いずれかの
Windows NT ドメイン、Windows 200x の Active Directory ベースのドメイン、
そして Samba ベースのドメイン環境において、ユーザーレベルのアプリケーション
アクセス認証を利用できるようになる。また、あなたの Samba 環境の設定に
対する適切な PAM ベースのローカルホストアクセス制御にも役立つ。
</para>

<para>
<indexterm><primary>PAM の管理</primary></indexterm>
<indexterm><primary>pam_smbpass.so</primary></indexterm>
PAM 経由の Winbind の設定方法を知ることに加え、さらに一般的な PAM 管理
の可能性と、特に <filename>pam_smbpass.so</filename> のようなツールを
導入して便利に使う方法も学ぶことができるだろう。
</para>

<note><para>
Winbind を使うのは、PAM 構成を単独で行うよりも敷居が高い。Winbind に関する
より詳細な情報については
<link linkend="winbind">Winbind: ドメインアカウントを使う</link>
を参照されたい。
</para></note>

<sect1>
<title>その機能と利点</title>

<para>
<indexterm><primary>Sun Solaris</primary></indexterm>
<indexterm><primary>xxxxBSD</primary></indexterm>
<indexterm><primary>Linux</primary></indexterm>
<indexterm><primary>着脱可能な認証モジュール</primary><see>PAM</see></indexterm>
<indexterm><primary>/etc/passwd</primary></indexterm>
<indexterm><primary>login</primary></indexterm>
<indexterm><primary>passwd</primary></indexterm>
<indexterm><primary>chown</primary></indexterm>
現在、多くの UNIX システム（例：Sun Solaris）や xxxBSD ファミリーおよび
Linux では、着脱可能な認証モジュール(PAM)機能を使って全ての認証、承認処理、
リソースの制御サービスを提供している。PAM の導入以前は、システムパスワード
データベース(<filename>/etc/passwd</filename>)以外のものを使おうとするなら、
セキュリティーサービスを提供するすべてのプログラムそれぞれに対して代替手段
を準備する必要がある。つまり、<command>login</command>, 
<command>passwd</command>, <command>chown</command> といったものの代替手段
を別途用意しなければならないということである。
</para>

<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>/etc/pam.conf</primary></indexterm>
<indexterm><primary>Solaris</primary></indexterm>
<indexterm><primary>/etc/pam.d</primary></indexterm>
PAM を使うと、これらのセキュリティープログラムを、これらが依存する認証／
承認インフラから切り離すことができる。PAM を構成するには、
<filename>/etc/pam.conf</filename> という１つのファイルを適切に変更する
(Solaris)か、または<filename>/etc/pam.d</filename>配下にある個別の制御
ファイルを編集する。
</para>

<para>
<indexterm><primary>PAMを有効にする</primary></indexterm>
<indexterm><primary>動的なロードが可能なライブラリーモジュール</primary></indexterm>
PAM が有効になっている UNIX/Linux システムでは、動的なロードができる適切な
ライブラリーモジュールが利用できるようになっていれば、システムでさまざまな
認証バックエンドを使うように構成するのは簡単である。それらのバックエンドは
システムでローカルに閉じていてもよいし、リモートサーバー上で集約されていてもよい。
</para>

<para>
PAM サポートモジュールで使えるもの：
</para>

<variablelist>
	<varlistentry><term><filename>/etc/passwd</filename></term><listitem>
		<para>
<indexterm><primary>/etc/passwd</primary></indexterm>
<indexterm><primary>PAM modules</primary></indexterm>
<indexterm><primary>pam_unix.so</primary></indexterm>
<indexterm><primary>pam_unix2.so</primary></indexterm>
<indexterm><primary>pam_pwdb.so</primary></indexterm>
<indexterm><primary>pam_userdb.so</primary></indexterm>
これらの PAM モジュールは標準の UNIX ユーザーデータベースを利用する。
最も有名なものは、<filename>pam_unix.so</filename>, 
<filename>pam_unix2.so</filename>, <filename>pam_pwdb.so</filename>,
<filename>pam_userdb.so</filename>と呼ばれるものである。
</para>
	</listitem></varlistentry>

	<varlistentry><term>Kerberos</term><listitem>
		<para>
<indexterm><primary>pam_krb5.so</primary></indexterm>
<indexterm><primary>Kerberos</primary></indexterm>
<indexterm><primary>Heimdal</primary></indexterm>
<indexterm><primary>MIT Kerberos</primary></indexterm>
<indexterm><primary>ADS</primary></indexterm>
<filename>pam_krb5.so</filename> モジュールを使うと、ケルベロス準拠の
あらゆるサーバーを使える。このツールは MIT Kerberos, Heimdal Kerberos, 
そしておそらく（もし有効であれば）Microsoft Active Directory にアクセス
するのにも使える。
</para>
	</listitem></varlistentry>

	<varlistentry><term>LDAP</term><listitem>
		<para>
<indexterm><primary>LDAP</primary></indexterm>
<indexterm><primary>pam_ldap.so</primary></indexterm>
<indexterm><primary>OpenLDAP</primary></indexterm>
<indexterm><primary>Sun ONE iDentity server</primary></indexterm>
<indexterm><primary>Novell eDirectory server</primary></indexterm>
<indexterm><primary>Microsoft Active Directory</primary></indexterm>
<filename>pam_ldap.so</filename> モジュールを使うと、LDAP v2 もしくは v3
準拠のあらゆるバックエンドサーバーを使える。よく使われる LDAP バックエンド
サーバーには OpenLDAP v2.0 and v2.1, Sun ONE iDentity server, 
Novell eDirectory server, Microsoft Active Directory がある。
</para>
	</listitem></varlistentry>

	<varlistentry><term>NetWare Bindery</term><listitem>
		<para>
<indexterm><primary>NetWare Bindery</primary></indexterm>
<indexterm><primary>pam_ncp_auth.so</primary></indexterm>
<indexterm><primary>bindery-enabled</primary></indexterm>
<indexterm><primary>NetWare Core Protocol-based server</primary></indexterm>
<filename>pam_ncp_auth.so</filename> モジュールを使うと、バインダリーが
有効な NetWare コアプロトコルベースのサーバーによる認証を利用できるようになる。
</para>
	</listitem></varlistentry>

	<varlistentry><term>SMB Password</term><listitem>
		<para>
<indexterm><primary>SMB Password</primary></indexterm>
<indexterm><primary>pam_smbpass.so</primary></indexterm>
<indexterm><primary>passdb backend</primary></indexterm>
<filename>pam_smbpass.so</filename> と呼ばれるモジュールを使うと、Samba の
&smb.conf; ファイルで設定された passdb バックエンドのユーザー認証を利用
できるようになる。
</para>
	</listitem></varlistentry>

	<varlistentry><term>SMB Server</term><listitem>
		<para>
<indexterm><primary>SMB Server</primary></indexterm>
<indexterm><primary>pam_smb_auth.so</primary></indexterm>
<filename>pam_smb_auth.so</filename> モジュールは、オリジナルの MS Windows
ネットワーク認証のためのツールである。Winbind モジュールがリリース
されている現在、このモジュールはすでに多少古臭くなってしまっている。
</para>
	</listitem></varlistentry>

	<varlistentry><term>Winbind</term><listitem>
		<para>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>pam_winbind.so</primary></indexterm>
<indexterm><primary>domain controller</primary></indexterm>
<indexterm><primary>authentication</primary></indexterm>
<filename>pam_winbind.so</filename> モジュールは、Samba は MS Windows の
ドメインコントローラーからの認証情報を取得できるようにするものである。
これにより、PAM が有効なアプリケーションに対して認証されたユーザーへの
アクセス権を与えるのが簡単になる。
</para>
	</listitem></varlistentry>

	<varlistentry><term>RADIUS</term><listitem>
		<para>
<indexterm><primary>Remote Access Dial-In User Service</primary><see>RADIUS</see></indexterm>
PAM RADIUS (Remote Access Dial-In User Service) と呼ばれる認証モジュールがある。
ほとんどのケースでは、管理者がこのツールのソースコードを持ってきて自分自身で
インストールを行う必要がある。RADIUS プロトコルは多くのルーターやターミナル
サーバーで使われているプロトコルである。
</para>
	</listitem></varlistentry>
</variablelist>

<para>
<indexterm><primary>pam_smbpasswd.so</primary></indexterm>
<indexterm><primary>pam_winbind.so</primary></indexterm>
<filename>pam_smbpasswd.so</filename> と <filename>pam_winbind.so</filename>
モジュールは、Samba 自身が提供するものである。
</para>

<para>
<indexterm><primary>広域ネットワークの帯域</primary></indexterm>
<indexterm><primary>効率のよい認証</primary></indexterm>
<indexterm><primary>PAMが利用可能</primary></indexterm>
<indexterm><primary>集中管理</primary></indexterm>
いったんこれらのモジュールを設定してしまえば、広範囲にまたがるネットワーク
帯域や PAM を利用した効率的な認証サービスを提供するような分散 Samba ドメイン
コントローラーの利用においても、高い柔軟性を得ることができる。つまり、単一の
ユーザーアカウントデータベースを使って、中央集中的な管理や保守の行き届いた
分散認証を実現できるのである。
</para>

</sect1>

<sect1>
<title>技術的な議論</title>

<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>権限を付与するアプリケーション</primary></indexterm>
<indexterm><primary>/etc/pam.conf</primary></indexterm>
<indexterm><primary>/etc/pam.d/</primary></indexterm>
システム管理者が自分のシステム上のアプリケーションにアクセス権を付与する際、
PAM はかなり柔軟に設定できるように設計されている。PAM によって制御される
システムセキュリティーのためのローカル設定には、単一ファイル 
<filename>/etc/pam.conf</filename> と <filename>/etc/pam.d/</filename>
ディレクトリーの２つがある。
</para>

<sect2>
<title>PAM 設定のための文法</title>

<para>
<indexterm><primary>PAM 特有のトークン</primary></indexterm>
<indexterm><primary>大文字小文字の区別</primary></indexterm>
この章では、これらのファイルで記述するエントリに関する正しい文法、および
一般的なオプションについて解説する。設定ファイルにおける PAM 特有の
トークンでは、大文字小文字の区別を行わない。ただし、モジュールのパス
については大文字小文字を区別する。なぜなら、これらはファイルの名前を
示すものであり、大文字小文字を区別するような一般的なファイルシステム
の性質に影響を受けるからである。与えられたモジュールに渡すための
引数が大文字小文字を区別するかどうかは、それぞれのモジュールで規定
されている。
</para>

<para>
後述の設定行に加え、システム管理者の便宜のために２つの特殊文字がある：
<quote>#</quote> から行末まではコメントとみなされる。またモジュールを
指定する行については <quote>\</quote> で改行をエスケープすることで、
次の行にまたがることができる。
</para>

<para>
<indexterm><primary>PAM 認証モジュール</primary></indexterm>
<indexterm><primary>/lib/security</primary></indexterm>
PAM の認証モジュール（ダイナミックリンクされたライブラリファイル）が
デフォルトの位置にある場合は、そのパスを明示する必要はない。Linux の場合、
デフォルトの位置は <filename>/lib/security</filename> となる。モジュールが
デフォルト位置以外にある場合は
<programlisting>
auth  required  /other_path/pam_strange_module.so
</programlisting>
のようにパスを明示しなければならない。
</para>

<sect3>
<title><filename>/etc/pam.d</filename> にあるエントリーの構造</title>

<para>
このセクションの残りの部分は、Linux-PAM プロジェクトのドキュメントから
の引用である。PAM に関する詳細は
<ulink url="http://ftp.kernel.org/pub/linux/libs/pam/">the Official Linux-PAM home page</ulink>
を参照のこと。
</para>

<para>
<indexterm><primary>/etc/pam.conf</primary></indexterm>
<filename>/etc/pam.conf</filename> ファイル中の一般的な設定行は、
以下の書式で記述する：
<programlisting>
サービス名  モジュールタイプ  制御フラグ  モジュールパス  引数
</programlisting>
</para>

<para>
これら各トークンの意味について解説する。Linux-PAM を構成するための２番目
のやり方（最近はむしろこちらの方が多いようだが）は、
<filename>/etc/pam.d/</filename> ディレクトリーの中身を介するという方法
である。それぞれのトークンの意味するところを解説した後、この方法について
述べることにする。
</para>

<variablelist>
	<varlistentry><term>サービス名</term><listitem>
		<para>
<indexterm><primary>ftpd</primary></indexterm>
<indexterm><primary>rlogind</primary></indexterm>
<indexterm><primary>su</primary></indexterm>
このエントリーに関連付けられるサービスの名前。<command>ftpd</command>, 
<command>rlogind</command>, <command>su</command> のように、サービス名は
アプリケーションにつけられた伝統的な名前であることが多い。
</para>

		<para>
デフォルトの認証メカニズムを定義するために予約されている、特別な名前もある。
これは <parameter>OTHER</parameter> と呼ばれるが、大文字小文字は固定されて
いない。名前付きサービスに特化したモジュールがある場合、
<parameter>OTHER</parameter>エントリーは無視される。
		</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>モジュールタイプ</term><listitem>
                <para>
（現時点では）以下の通り４つのタイプのモジュールがある。
		</para>

		<itemizedlist>
			<listitem><para>
<indexterm><primary>auth</primary></indexterm>
<indexterm><primary>/etc/groups</primary></indexterm>
<parameter>auth:</parameter> このモジュールタイプは、ユーザーを認証
するにあたって２つの側面がある。まず、アプリケーションに対して
パスワード問い合わせの指示を行うか、または別の手段を使って、操作
しているユーザが誰なのかを特定する。次に、このモジュールはその
資格認定～承認という性質を通して（<filename>/etc/groups</filename> 
ファイルとは独立した形で）グループの会員資格やその他の特権に関する
許可を与えることができる。
			</para></listitem>

			<listitem><para>
<indexterm><primary>account</primary></indexterm>
<indexterm><primary>認証をベースとしないアカウント管理</primary></indexterm>
<parameter>account:</parameter> このモジュールは、認証をベースとしない
アカウント管理を行う。よくある利用法としては、利用時間帯、現時点で利用
可能なシステムリソース（最大ユーザー数）、またはユーザがログインした場所
などをベースとした、サービスへのアクセスの制限や許可が挙げられる。
たとえば <quote>root</quote> ログインの許可は、コンソールからのみに制限
されているかもしれない。
			</para></listitem>

			<listitem><para>
<indexterm><primary>session</primary></indexterm>
<parameter>session:</parameter> このモジュールは、主に対象のユーザーが
サービスを割り当てられる前もしくは後に行われるべきことに関連付けられる。
たとえばそのユーザに関する何らかのデータ交換をする際のオープン／クローズ
情報のログを取ったり、ディレクトリーをマウントすることなどが挙げられる。
</para></listitem>

			<listitem><para>
<indexterm><primary>password</primary></indexterm>
<parameter>password:</parameter> この最後のモジュールタイプは、そのユーザに
関連する認証トークンを更新するために必要なものである。典型的には、
<quote>challenge/response</quote> 認証を行う
<parameter>(auth)</parameter> モジュールタイプがある。
</para></listitem>
		</itemizedlist>
		</listitem>
	</varlistentry>

	<varlistentry><term>制御フラグ</term><listitem>
		<para>制御フラグは、関連するモジュールの成功／失敗に対して PAM
ライブラリーがどう対応するのかを指示するのに使われる。PAM モジュール群は
スタック化（同じタイプのモジュール群を次々に重ねること）できるので、
制御フラグがそれぞれのモジュールの相対的な重要度を決定する。
アプリケーションは <filename>/etc/pam.conf</filename> ファイルにある
モジュールについて、個々の成功や失敗に影響されない。その代わり、
Linux-PAM ライブラリーからの成功や失敗の応答のサマリーを受け取る。
これらのモジュールは、<filename>/etc/pam.conf</filename> にエントリー
されている順に実行される。つまり前の方にあるエントリーは後ろの方の
ものより先に実行される。Linux-PAM v0.60 の場合、制御フラグは２つの
文法のうちのいずれかで定義できる。
</para>

		<para>
<indexterm><primary>required</primary></indexterm>
<indexterm><primary>requisite</primary></indexterm>
<indexterm><primary>sufficient</primary></indexterm>
<indexterm><primary>optional</primary></indexterm>
制御フラグについてのシンプルな（かつ従来の）文法では、特定のモジュール
の成功や失敗について、それらを通知するための重大度を単一のキーワードで
指定する。キーワードには <parameter>required</parameter>, 
<parameter>requisite</parameter>, <parameter>sufficient</parameter>, 
<parameter>optional</parameter> の４種類ある。
	</para>

		<para>
		Linux-PAM ライブラリーでは以下の方式でこれらのキーワードを
		解釈する。
		</para>

		<itemizedlist>
			<listitem><para>
<parameter>required:</parameter> このモジュールの正常終了をもって、この
モジュールタイプ機能の成功とすることを表す。ただしこのモジュールが失敗
した場合でも、（同じモジュールタイプを持つ）残りのすべてのモジュールの
実行が完了するまでは、失敗したことはユーザーには通知されない。
			</para></listitem>

			<listitem><para>
<parameter>requisite:</parameter> required と似ているが、このモジュール
が失敗を返したとき制御が直接アプリケーションに戻されるところが異なる。
その戻り値は、失敗したモジュールのうち最初に required もしくは requisite 
指定されていたものに関連付けられる。安全でない媒体を通してユーザーが
パスワードを入力するような可能性がある場合、このフラグはその状況を排除
するために使える。そのような可能性が残っていると、システム上の有効な
アカウントの情報を攻撃者に知らせてしまうようなことにつながりかねない。
このような可能性があると、共用ホスト環境で慎重に扱うべきパスワードを
公開してしまうようなゆゆしき環境において、一方的に不利になるだろう。
			</para></listitem>

			<listitem><para>
<parameter>sufficient:</parameter> このモジュールが成功すると、Linux-PAM 
ライブラリがこのモジュールタイプについてその目的を達成したものとするのに
<parameter>sufficient</parameter>（十分である）とみなされる。
これまでに要求されたモジュールのうち失敗したものがない場合、このタイプに
関して<quote>スタックされた</quote>モジュールは、これ以上起動されない。
（このケースでは、後続の要求されたモジュールは起動されない。）
ただしこのモジュールが失敗しても、このモジュールタイプレベルで成功した
アプリケーションについては致命的エラーとはみなされない。
			</para></listitem>

            <listitem><para>
<parameter>optional:</parameter> この制御フラグは、その名前が示して
いるように、そのモジュールの成功／失敗が、そのユーザーアプリケーション
がサービスを提供できるかどうかを決めるものではないことを示す。一般に、
そのモジュールスタック全体が成功か失敗かを決定する際、Linux-PAM 
はこのようなモジュールを考慮しない。しかしながら、それ以前もしくは
それ以降のどのモジュールも明確に成功か失敗かを示さない場合、この
モジュールがアプリケーションへの応答の性質を決めることがある。
後者のひとつの例として、他のモジュールが PAM_IGNORE のようなものを
返した場合が挙げられる。
			</para></listitem>
		</itemizedlist>

		<para>
ユーザーを認証する方法について、その文法が複雑に（新しく）なれば
なるほど、管理者はより詳しく記述し、より細かく制御できるように
なるものである。この制御フラグの書式は、以下のように
<parameter>値=アクション</parameter> トークンの並びが
かぎ括弧で区切られたものである：
		</para>

<para><programlisting>
[値1=アクション1 値2=アクション2 ...]
</programlisting></para>

		<para>
ここで、<parameter>値1</parameter> は以下の戻り値のいずれか：
<screen>
<parameter>success; open_err; symbol_err; service_err; system_err; buf_err;</parameter>
<parameter>perm_denied; auth_err; cred_insufficient; authinfo_unavail;</parameter>
<parameter>user_unknown; maxtries; new_authtok_reqd; acct_expired; session_err;</parameter>
<parameter>cred_unavail; cred_expired; cred_err; no_module_data; conv_err;</parameter>
<parameter>authtok_err; authtok_recover_err; authtok_lock_busy;</parameter>
<parameter>authtok_disable_aging; try_again; ignore; abort; authtok_expired;</parameter>
<parameter>module_unknown; bad_item;</parameter> and <parameter>default</parameter>.
</screen>
</para>

		<para>
最後の<parameter>default</parameter>は、明示的に定義されない戻り値に対する
動作を規定するのに使える。
		</para>

		<para>
<parameter>アクション1</parameter> には正の整数かまたは以下のトークン
のいずれかを指定する：
<parameter>ignore</parameter>; <parameter>ok</parameter>; <parameter>done</parameter>;
<parameter>bad</parameter>; <parameter>die</parameter>; <parameter>reset</parameter>.
正の整数 J がアクションとして指定された場合、現在のモジュールタイプについて
続く J 個のモジュールをスキップする。この方法により、管理者は異なった実行
パスを持つ多くのスタックされたモジュールを、適度に洗練された方法で組み合わせる
ことができる。個々のモジュールの反応によって、どのパスにあるものが適用されるかが
決定される。
		</para>

		<itemizedlist>
			<listitem><para>
<parameter>ignore:</parameter> モジュールスタックに対して使われると、その
モジュールの戻り値は、アプリケーションが受け取るリターンコードには影響しない。
			</para></listitem>

			<listitem><para>
<parameter>bad:</parameter> このアクションが指定されると、戻り値はモジュールの
失敗を表しているとみなされる。このモジュールがスタックの中で最初に失敗すると、
その戻り値はスタック全体の値として使われる。
			</para></listitem>

            <listitem><para>
<parameter>die:</parameter> bad と同じだが、さらにモジュールスタックが終了
して即時に PAM がアプリケーションに結果を返す。
			</para></listitem>

           <listitem><para>
<parameter>ok:</parameter> この戻り値をモジュールスタック全体の戻り値
として直接返すべきだと管理者が考えていることを PAM に教える。つまり、
このスタックの直前の状態が戻り値 PAM_SUCCESS を返すことになっていた
場合は、モジュールの戻り値がこの値を上書きする。もしスタックの直前の
状態が特定のモジュールの失敗を表す何らかの値を保持している場合は、
この <parameter>ok</parameter>値はその値を上書きしない。
			</para></listitem>

            <listitem><para>
<parameter>done:</parameter> <parameter>ok</parameter> と同じだが、
モジュールスタックを終了させて PAM の制御を即時にアプリケーションに
戻すという副作用があるところが異なる。
                        </para></listitem>

           <listitem><para>
<parameter>reset:</parameter> モジュールスタックの状態を保持するメモリ
をクリアし、次のスタックモジュールから実行を再開する。
			</para></listitem>
		</itemizedlist>

		<para>
<parameter>required</parameter>; <parameter>requisite</parameter>;
<parameter>sufficient</parameter>; <parameter>optional</parameter>
はそれぞれ [...] という構文をもつという意味では同等の、以下の表現を
備えている：
		</para>

		<para>
		<itemizedlist>
			<listitem><para>
<parameter>required</parameter> は
<parameter>[success=ok new_authtok_reqd=ok ignore=ignore default=bad]</parameter>
と同等。
			</para></listitem>

			<listitem><para>
<parameter>requisite</parameter> は
<parameter>[success=ok new_authtok_reqd=ok ignore=ignore default=die]</parameter>
と同等。
			</para></listitem>

			<listitem><para>
<parameter>sufficient</parameter> は
<parameter>[success=done  new_authtok_reqd=done  default=ignore]</parameter>
と同等。
			</para></listitem>

			<listitem><para>
<parameter>optional</parameter> は
<parameter>[success=ok new_authtok_reqd=ok default=ignore]</parameter>
と同等である。
			</para></listitem>
		</itemizedlist>
		</para>

		<para>
この新しい書式が持つパワーの感触をつかむために、これで何ができる
のかを体験してみるとよいだろう。Linux-PAM-0.63 ではクライアント・
プラグイン・エージェントの概念が導入された。これにより、PAM では
クライアント・サーバー・アプリケーションに対して、トランスポート・
プロトコルの継承を利用したマシン間の認証を可能にしている。
<parameter>[ ... value=action ... ]</parameter> という制御用構文
により、アプリケーションがそれに準拠するクライアントに対して
バイナリ・プロンプトのサポートを構成できるようになっている。ただし
レガシーアプリケーションの場合は柔軟に代替認証モードにフェイル
オーバーできる。
		</para>
		</listitem>
	</varlistentry>

	<varlistentry><term>module-path</term><listitem>
		<para>
動的ローダブルオブジェクトファイルのパス名 - 差し替え可能な
モジュールそのもの。モジュールパスの最初の文字が
<quote>/</quote> の場合、それは完全なパスであるとみなされる。
そうでない場合、与えられたモジュールパスはデフォルトのモジュール
パスである <filename>/lib/security</filename> の後ろに付加される
（ただし前述の注意事項を参照のこと）。
		</para>

		<para>
The arguments are a list of tokens that are passed to the module 
when it is invoked, 
much like arguments to a typical Linux shell command. Generally, 
valid arguments are optional and are specific to any given module. 
Invalid arguments are ignored by a module; however, 
when encountering an invalid argument, 
the module is required to write an error to syslog(3). 
For a list of generic options, see the next section.
		</para>

		<para>
If you wish to include spaces in an argument, 
you should surround that argument with square brackets. 
For example:
		</para>

<para><programlisting>
squid auth required pam_mysql.so user=passwd_query passwd=mada \
db=eminence [query=select user_name from internet_service where \
user_name=<quote>%u</quote> and password=PASSWORD(<quote>%p</quote>) and service=<quote>web_proxy</quote>]
</programlisting></para>

		<para>
When using this convention, 
you can include <quote>[</quote> characters inside the string, 
and if you wish to have a <quote>]</quote>
character inside the string that will survive the argument parsing, 
you should use <quote>\[</quote>. In other words,
		</para>

<para><programlisting>
[..[..\]..]    -->   ..[..]..
</programlisting></para>

		<para>
Any line in one of the configuration files that is not formatted correctly 
will generally tend (erring on the side of caution) 
to make the authentication process fail. 
A corresponding error is written to the system log files with a call to syslog(3). 
		</para>
		</listitem>
	</varlistentry>
</variablelist>

</sect3>

</sect2>

<sect2>
<title>Example System Configurations</title>

<para>
The following is an example <filename>/etc/pam.d/login</filename> configuration file. 
This example had all options uncommented and is probably not usable 
because it stacks many conditions 
before allowing successful completion of the login process. 
Essentially, all conditions can be disabled by commenting them out, 
except the calls to <filename>pam_pwdb.so</filename>.
</para>

<sect3>
<title>PAM: Original Login Config</title>

<para>
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>login</quote> service
#
auth         required    pam_securetty.so
auth         required    pam_nologin.so
# auth       required    pam_dialup.so
# auth       optional    pam_mail.so
auth         required    pam_pwdb.so shadow md5
# account    requisite   pam_time.so
account      required    pam_pwdb.so
session      required    pam_pwdb.so
# session    optional    pam_lastlog.so
# password   required    pam_cracklib.so retry=3
password     required    pam_pwdb.so shadow md5
</programlisting>
</para>

</sect3>

<sect3>
<title>PAM: Login Using <filename>pam_smbpass</filename></title>

<para>
PAM allows use of replaceable modules. 
Those available on a sample system include:
</para>

<para><prompt>$</prompt><userinput>/bin/ls /lib/security</userinput>
<programlisting>
pam_access.so    pam_ftp.so          pam_limits.so     
pam_ncp_auth.so  pam_rhosts_auth.so  pam_stress.so     
pam_cracklib.so  pam_group.so        pam_listfile.so   
pam_nologin.so   pam_rootok.so       pam_tally.so      
pam_deny.so      pam_issue.so        pam_mail.so       
pam_permit.so    pam_securetty.so    pam_time.so       
pam_dialup.so    pam_lastlog.so      pam_mkhomedir.so  
pam_pwdb.so      pam_shells.so       pam_unix.so       
pam_env.so       pam_ldap.so         pam_motd.so       
pam_radius.so    pam_smbpass.so      pam_unix_acct.so  
pam_wheel.so     pam_unix_auth.so    pam_unix_passwd.so
pam_userdb.so    pam_warn.so         pam_unix_session.so
</programlisting></para>

<para>
The following example for the login program replaces the use of 
the <filename>pam_pwdb.so</filename> module that uses the system 
password database (<filename>/etc/passwd</filename>,
<filename>/etc/shadow</filename>, <filename>/etc/group</filename>) with 
the module <filename>pam_smbpass.so</filename>, which uses the Samba 
database containing the Microsoft MD4 encrypted password 
hashes. This database is stored either in 
<filename>/usr/local/samba/private/smbpasswd</filename>, 
<filename>/etc/samba/smbpasswd</filename> or in 
<filename>/etc/samba.d/smbpasswd</filename>, depending on the 
Samba implementation for your UNIX/Linux system. The 
<filename>pam_smbpass.so</filename> module is provided by 
Samba version 2.2.1 or later. It can be compiled by specifying the 
<option>--with-pam_smbpass</option> options when running Sambaの
<command>configure</command> script. For more information
on the <filename>pam_smbpass</filename> module, see the documentation
in the <filename>source/pam_smbpass</filename> directory of the Samba 
source distribution.
</para>

<para>
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>login</quote> service
#
auth        required    pam_smbpass.so nodelay
account     required    pam_smbpass.so nodelay
session     required    pam_smbpass.so nodelay
password    required    pam_smbpass.so nodelay
</programlisting></para>

<para>
The following is the PAM configuration file for a particular 
Linux system. The default condition uses <filename>pam_pwdb.so</filename>.
</para>

<para>
	<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>samba</quote> service
#
auth       required     pam_pwdb.so nullok nodelay shadow audit
account    required     pam_pwdb.so audit nodelay
session    required     pam_pwdb.so nodelay
password   required     pam_pwdb.so shadow md5
</programlisting></para>

<para>
In the following example, 
the decision has been made to use the <command>smbpasswd</command> database 
even for basic Samba authentication. 
Such a decision could also be made for the <command>passwd</command> program 
and would thus allow the <command>smbpasswd</command> passwords 
to be changed using the <command>passwd</command> program:
</para>

<para>
		<programlisting>
#%PAM-1.0
# The PAM configuration file for the <quote>samba</quote> service
#
auth       required     pam_smbpass.so nodelay
account    required     pam_pwdb.so audit nodelay
session    required     pam_pwdb.so nodelay
password   required     pam_smbpass.so nodelay smbconf=/etc/samba.d/smb.conf
</programlisting>
</para>

<note><para>PAM allows stacking of authentication mechanisms. It is 
also possible to pass information obtained within one PAM module through 
to the next module in the PAM stack. Please refer to the documentation for 
your particular system implementation for details regarding the specific 
capabilities of PAM in this environment. Some Linux implementations also 
provide the <filename>pam_stack.so</filename> module that allows all 
authentication to be configured in a single central file. The 
<filename>pam_stack.so</filename> method has some devoted followers 
on the basis that it allows for easier administration. As with all issues in 
life, though, every decision has trade-offs, so you may want to examine the 
PAM documentation for further helpful information.
</para></note>

</sect3>

</sect2>

<sect2>
<title>&smb.conf; PAM Configuration</title>

<para>
There is an option in &smb.conf; called <smbconfoption name="obey pam restrictions"/>.
The following is from the online help for this option in SWAT:
</para>

<blockquote>
<para>
When Samba is configured to enable PAM support 
(i.e., <option>--with-pam</option>), 
this parameter will control whether or not Samba should obey PAM's 
account and session management directives. 
The default behavior is to use PAM for clear-text authentication only 
and to ignore any account or session management. 
Samba always ignores PAM for authentication in the case of 
<smbconfoption name="encrypt passwords">yes</smbconfoption>. 
The reason is that PAM modules cannot support the challenge/response 
authentication mechanism needed in the presence of SMB password encryption. 
</para>

<para>Default: <smbconfoption name="obey pam restrictions">no</smbconfoption></para>
</blockquote>

</sect2>

<sect2>
<title>Remote CIFS Authentication Using <filename>winbindd.so</filename></title>

<para>
All operating systems depend on the provision of user credentials acceptable to the platform.
UNIX requires the provision of a user identifier (UID) as well as a group identifier (GID).
These are both simple integer numbers that are obtained from a password backend such
as <filename>/etc/passwd</filename>.
</para>

<para>
Users and groups on a Windows NT server are assigned a relative ID (RID) which is unique for
the domain when the user or group is created. To convert the Windows NT user or group into
a  UNIX user or group, a mapping between RIDs and UNIX user and group IDs is required. This
is one of the jobs that winbind performs.
</para>

<para>
As winbind users and groups are resolved from a server, user and group IDs are allocated
from a specified range. This is done on a first come, first served basis, although all
existing users and groups will be mapped as soon as a client performs a user or  group 
enumeration command. The allocated UNIX IDs are stored in a database file under the Samba
lock directory and will be remembered.
</para>

<para>
The astute administrator will realize from this that the combination of <filename>pam_smbpass.so</filename>, 
<command>winbindd</command>, and a distributed <smbconfoption name="passdb backend"></smbconfoption>
such as <parameter>ldap</parameter> will allow the establishment of a centrally managed, distributed user/password
database that can also be used by all PAM-aware (e.g., Linux) programs and applications. This arrangement can have
particularly potent advantages compared with the use of Microsoft Active Directory Service (ADS) insofar as
the reduction of wide-area network authentication traffic.
</para>

<warning><para>
The RID to UNIX ID database is the only location where the user and group  mappings are 
stored by <command>winbindd</command>. If this file is deleted or corrupted, there is no way for <command>winbindd</command>
to determine which user and group IDs correspond to Windows NT user and group RIDs.
</para></warning>

</sect2>

<sect2>
<title>Password Synchronization Using <filename>pam_smbpass.so</filename></title>

<para>
<filename>pam_smbpass</filename> is a PAM module that can be used on conforming systems to
keep the <filename>smbpasswd</filename> (Samba password) database in sync with the UNIX
password file. PAM is an API supported
under some UNIX operating systems, such as Solaris, HPUX, and Linux, that provides a
generic interface to authentication mechanisms.
</para>

<para>
This module authenticates a local <filename>smbpasswd</filename> user database. If you require
support for authenticating against a remote SMB server, or if you are
concerned about the presence of SUID root binaries on your system, it is
recommended that you use <filename>pam_winbind</filename> instead.
</para>

<para>
Options recognized by this module are shown in <link linkend="smbpassoptions">next table</link>.
<table frame="all" id="smbpassoptions">
	<title>Options recognized by <parameter>pam_smbpass</parameter></title>
	<tgroup cols="2" align="left">
		<colspec align="left"/>
		<colspec align="justify" colwidth="1*"/>
	<tbody>
		<row><entry>debug</entry><entry>Log more debugging info.</entry></row>
		<row><entry>audit</entry><entry>Like debug, but also logs unknown usernames.</entry></row>
		<row><entry>use_first_pass</entry><entry>Do not prompt the user for passwords; take them from PAM_ items instead.</entry></row>
		<row><entry>try_first_pass</entry><entry>Try to get the password from a previous PAM module; fall back to prompting the user.</entry></row>
		<row><entry>use_authtok</entry>
			<entry>Like try_first_pass, but *fail* if the new PAM_AUTHTOK has not been previously set (intended for stacking password modules only).</entry></row>
		<row><entry>not_set_pass</entry><entry>Do not make passwords used by this module available to other modules.</entry></row>
		<row><entry>nodelay</entry><entry>dDo not insert ~1-second delays on authentication failure.</entry></row>
		<row><entry>nullok</entry><entry>Null passwords are allowed.</entry></row>
		<row><entry>nonull</entry><entry>Null passwords are not allowed. Used to override the Samba configuration.</entry></row>
		<row><entry>migrate</entry><entry>Only meaningful in an <quote>auth</quote> context; used to update smbpasswd file with a password used for successful authentication.</entry></row>
		<row><entry>smbconf=<replaceable>file</replaceable></entry><entry>Specify an alternate path to the &smb.conf; file.</entry></row>
	</tbody>
</tgroup>
</table>
</para>

<para>
The following are examples of the use of <filename>pam_smbpass.so</filename> in the format of the Linux
<filename>/etc/pam.d/</filename> files structure. Those wishing to implement this
tool on other platforms will need to adapt this appropriately.
</para>

<sect3>
<title>Password Synchronization Configuration</title>

<para>
The following is a sample PAM configuration that shows the use of pam_smbpass to make
sure <filename>private/smbpasswd</filename> is kept in sync when <filename>/etc/passwd (/etc/shadow)</filename>
is changed. It is useful when an expired password might be changed by an
application (such as <command>ssh</command>).
</para>

<para>
	<programlisting>
#%PAM-1.0
# password-sync
#
auth       requisite    pam_nologin.so
auth       required     pam_unix.so
account    required     pam_unix.so
password   requisite    pam_cracklib.so retry=3
password   requisite    pam_unix.so shadow md5 use_authtok try_first_pass
password   required     pam_smbpass.so nullok use_authtok try_first_pass
session    required     pam_unix.so
</programlisting></para>
</sect3>

<sect3>
<title>Password Migration Configuration</title>

<para>
The following PAM configuration shows the use of <filename>pam_smbpass</filename> to migrate
from plaintext to encrypted passwords for Samba. Unlike other methods,
this can be used for users who have never connected to Samba shares:
password migration takes place when users <command>ftp</command> in, login using <command>ssh</command>, pop
their mail, and so on.
</para>

<para>
	<programlisting>
#%PAM-1.0
# password-migration
#
auth       requisite   pam_nologin.so
# pam_smbpass is called IF pam_unix succeeds.
auth       requisite   pam_unix.so
auth       optional    pam_smbpass.so migrate
account    required    pam_unix.so
password   requisite   pam_cracklib.so retry=3
password   requisite   pam_unix.so shadow md5 use_authtok try_first_pass
password   optional    pam_smbpass.so nullok use_authtok try_first_pass
session    required    pam_unix.so
</programlisting></para>
</sect3>

<sect3>
<title>Mature Password Configuration</title>

<para>
The following is a sample PAM configuration for a mature <filename>smbpasswd</filename> installation.
<filename>private/smbpasswd</filename> is fully populated, and we consider it an error if
the SMB password does not exist or does not match the UNIX password.
</para>

<para>
<programlisting>
#%PAM-1.0
# password-mature
#
auth       requisite    pam_nologin.so
auth       required     pam_unix.so
account    required     pam_unix.so
password   requisite    pam_cracklib.so retry=3
password   requisite    pam_unix.so shadow md5 use_authtok try_first_pass
password   required     pam_smbpass.so use_authtok use_first_pass
session    required     pam_unix.so
</programlisting></para>
</sect3>

<sect3>
<title>Kerberos Password Integration Configuration</title>

<para>
The following is a sample PAM configuration that shows <parameter>pam_smbpass</parameter> used together with
<parameter>pam_krb5</parameter>. This could be useful on a Samba PDC that is also a member of
a Kerberos realm.
</para>

<para>
		<programlisting>
#%PAM-1.0
# kdc-pdc
#
auth       requisite   pam_nologin.so
auth       requisite   pam_krb5.so
auth       optional    pam_smbpass.so migrate
account    required    pam_krb5.so
password   requisite   pam_cracklib.so retry=3
password   optional    pam_smbpass.so nullok use_authtok try_first_pass
password   required    pam_krb5.so use_authtok try_first_pass
session    required    pam_krb5.so
</programlisting></para>

</sect3>

</sect2>

</sect1>

<sect1>
<title>Common Errors</title>

<para>
PAM can be fickle and sensitive to configuration glitches. Here we look at a few cases from
the Samba mailing list.
</para>

	<sect2>
	<title>pam_winbind Problem</title>

	<para>
	A user reported, <emphasis>I have the following PAM configuration</emphasis>:
	</para>

<para>
<programlisting>
auth required /lib/security/pam_securetty.so
auth sufficient /lib/security/pam_winbind.so
auth sufficient /lib/security/pam_unix.so use_first_pass nullok
auth required /lib/security/pam_stack.so service=system-auth
auth required /lib/security/pam_nologin.so
account required /lib/security/pam_stack.so service=system-auth
account required /lib/security/pam_winbind.so
password required /lib/security/pam_stack.so service=system-auth
</programlisting>
</para>

	<para>
	<emphasis>When I open a new console with [ctrl][alt][F1], I can't log in with my user <quote>pitie.</quote>
	I have tried with user <quote>scienceu\pitie</quote> also.</emphasis>
	</para>

	<para>
	The problem may lie with the inclusion of <parameter>pam_stack.so
	service=system-auth</parameter>. That file often contains a lot of stuff that may
	duplicate what you are already doing. Try commenting out the <parameter>pam_stack</parameter> lines
	for <parameter>auth</parameter> and <parameter>account</parameter> and see if things work. If they do, look at
	<filename>/etc/pam.d/system-auth</filename> and copy only what you need from it into your
	<filename>/etc/pam.d/login</filename> file. Alternatively, if you want all services to use
	Winbind, you can put the Winbind-specific stuff in <filename>/etc/pam.d/system-auth</filename>.
	</para>

	</sect2>

	<sect2>
	<title>Winbind Is Not Resolving Users and Groups</title>

	<para>
	<quote>
	My &smb.conf; file is correctly configured. I have specified 
	<smbconfoption name="idmap uid">12000</smbconfoption> 
	and <smbconfoption name="idmap gid">3000-3500,</smbconfoption>
	and <command>winbind</command> is running. When I do the following it all works fine.
	</quote>
	</para>

<para><screen>
&rootprompt;<userinput>wbinfo -u</userinput>
MIDEARTH\maryo
MIDEARTH\jackb
MIDEARTH\ameds
...
MIDEARTH\root

&rootprompt;<userinput>wbinfo -g</userinput>
MIDEARTH\Domain Users
MIDEARTH\Domain Admins
MIDEARTH\Domain Guests
...
MIDEARTH\Accounts

&rootprompt;<userinput>getent passwd</userinput>
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/bin/bash
...
maryo:x:15000:15003:Mary Orville:/home/MIDEARTH/maryo:/bin/false
</screen></para>

	<para>
	<quote>
	But this command fails:
	</quote>
<screen>
&rootprompt;<userinput>chown maryo a_file</userinput>
chown: 'maryo': invalid user
</screen>
	<quote>This is driving me nuts! What can be wrong?</quote>
	</para>

	<para>
	Your system is likely running <command>nscd</command>, the name service
	caching daemon. Shut it down, do not restart it! You will find your problem resolved.
	</para>

	</sect2>
</sect1>

</chapter>
