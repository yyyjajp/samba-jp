<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="locking">
<chapterinfo>
	&author.jeremy;
	&author.jelmer;
	&author.jht;
	&author.eroseme;
</chapterinfo>
<title>ファイルとレコードのロッキング</title>

<para>
<indexterm><primary>locking</primary></indexterm>
多くのネットワーク管理者に問題を発生させる1つの領域はロッキングである。
問題の範囲はインターネット上で検索することですぐにはっきりする。
</para>

<sect1>
<title>機能と利便性</title>

<para>
<indexterm><primary>ロッキングのセマンティクス</primary></indexterm>
Sambaは、Microsoft Windows NT4/200xサーバも提供する、Microsoft Windowsクライアントが
期待するすべてのロッキングのセマンティクスを提供する。
</para>

<para>
<indexterm><primary>ロッキング</primary></indexterm>
<emphasis>ロッキング</emphasis>という用語は、並外れて広い意味を持ち、この1つの用語の
配下にすべてカテゴライズされる機能の範囲をカバーしている。
</para>

<para>
<indexterm><primary>opportunistic locking</primary></indexterm>
<indexterm><primary>locking protocol</primary></indexterm>
<indexterm><primary>performance advantage</primary></indexterm>
Opportunistic lockingはネットワークで結合されたクライアント上で、アプリケーションの
見かけの性能を向上させることが出来る好ましい機能である。しかし、opportunistic locking
プロトコルは頑丈ではなく、そのため、極端に単純化した設定か、広範囲の遅くて障害の多い
ネットワーク上を超えて起動するときに、問題に遭遇する。この場合、opportunistic locking
のOSによる管理か、反復的なエラーは提供することを意図した考えられる性能の利点を相殺する。
</para>

<para>
<indexterm><primary>レジストリ</primary></indexterm>
Microsoft Windows ネットワーク管理者は、ファイルとレコードのロッキングセマンティックス
(動作)はSamba中かMicrosoft Windowsクライアント上のレジストリの設定で制御できることを
知っておく必要がある。
</para>

<note>
<para>
<indexterm><primary>lockingの無効化</primary></indexterm>
時々、各Microsoft WindowsクライアントのようにSambaサーバ上でロッキングの制御の設定を
無効化する必要がある！
</para>
</note>

</sect1>

<sect1>
<title>議論</title>

<para>
<indexterm><primary>レコードのロッキング</primary></indexterm>
<indexterm><primary>拒否モード</primary></indexterm>
SMBサーバによって実行されることが必要な2つのタイプのロッキングがある。最初のものは
オープンしているファイル中の一定の範囲のバイト範囲をクライアントがロックすることが
できる<emphasis>レコードロッキング</emphasis>である。2番目のものは、ファイルが
オープンしているときに指定される<emphasis>拒否モード</emphasis>である。
</para>

<para>
<indexterm><primary>ロッキングのセマンティックス</primary></indexterm>
<indexterm><primary>レコードロッキング</primary></indexterm>
<indexterm><primary>ロッキング</primary></indexterm>
<indexterm><primary>バイト幅</primary></indexterm>
<indexterm><primary>UNIXのロッキング</primary></indexterm>
UNIX配下のレコードロッキングのセマンティックスは、Windows配下のレコードロッキングと大幅に
異なる。Samba2.2より前のSambaは、異なったSambaクライアントとの間で、適切なレコード
ロッキングを実装するために、ネイティブなfcntl()UNIXシステムコールを使うことを試みた。
これはいくつかの理由で完全に正しいものにはならなかった。最も簡単なものは、Windows
クライアントはロックするバイトレンジとして、クライアントのOSに依存するが、2の32乗か2の
64乗の範囲を指定できた。UNIXロッキングはレンジの幅として2の31乗までしかサポートして
いなかった。そのため、2の31乗以上のロック要求を正確に満足させることは出来なかった。
そのほかにもここに記述するのには余りにも多すぎる数多くの違いがあった。
</para>

<para>
<indexterm><primary>レコードロッキング</primary></indexterm>
<indexterm><primary>バイト幅ロック</primary></indexterm>
Samba2.2以降では、UNIXシステムに依存しない、独立したレコードロッキングを完璧に実装した。
もしもクライアントが0から2の31乗までの間でバイト幅ロックを要求した場合、SambaはUNIX
システムにこの要求を落として扱う。他のどのようなロックもUNIXでは扱わない。
</para>

<para>
<indexterm><primary>ロックのチェック</primary></indexterm>
<indexterm><primary>rpc.lockd</primary></indexterm>
厳密に言うと、Sambaサーバはファイル上への各読み/書きの呼び出し前にロックのチェックを
すべきである。不幸にも、fcntl()が機能する方法で、これは遅延を引き起こし、
<command>rpc.lockd</command>に負荷を掛けることになる。これは、それに対してロッキングが
重要なとき、読み書きの前にロッキングを呼び出すことをクライアントは独立して行うはずという
理由で、ほとんど常時不必要である。既定値では、Sambaはクライアントによって明示的に
問い合わせがあったときにのみロッキングコールを行うが、もしも
<smbconfoption name="strict locking">yes</smbconfoption>を設定した場合、
読み/書きの呼び出し<emphasis>毎に</emphasis>ロックチェックの呼び出しを行う。
</para>

<para>
<indexterm><primary>バイト幅のロッキング</primary></indexterm>
<smbconfoption name="locking">no</smbconfoption>を使うことによってバイト幅ロッキングを
完全に停止することも出来る。これは、ロッキングをサポートしない共有か、必要がないとき
(たとえばCD-ROMなど)に便利である。この場合、Sambaは毎回OKであると、ロッキング呼び出しの
戻り値をクライアントに返すようにごまかす。
</para>

<para>
<indexterm><primary>deny modes</primary></indexterm>
<indexterm><primary>DENY_NONE</primary></indexterm>
<indexterm><primary>DENY_READ</primary></indexterm>
<indexterm><primary>DENY_WRITE</primary></indexterm>
<indexterm><primary>DENY_ALL</primary></indexterm>
<indexterm><primary>DENY_FCB</primary></indexterm>
<indexterm><primary>DENY_DOS</primary></indexterm>
2番目のクラスのロッキングは、<emphasis>deny modes</emphasis>である。これらは、その
オープンに対して同時に許されるべきアクセスのタイプを決めるため、ファイルをオープン
したときにアプリケーションによって設定される。クライアントは、
<constant>DENY_NONE</constant>, <constant>DENY_READ</constant>,
<constant>DENY_WRITE</constant>, か <constant>DENY_ALL</constant>を問い合わせできる。
<constant>DENY_FCB</constant> と <constant>DENY_DOS</constant>と呼ばれる特別な互換
モードもある。
</para>

<sect2>
<title>Opportunistic Lockingの概要</title>

<para>
<indexterm><primary>opportunistic locking</primary></indexterm>
<indexterm><primary>oplocks</primary></indexterm>
<indexterm><primary>caching</primary></indexterm>
Opportunistic locking (oplocks)はサーバ上に存在するファイルにアクセスする時に、
ネットワークの効率を増大させる目的で、レジストリエントリ(サーバとクライアント上)
経由でWindowsファイルシステム(APIと対照した場合)によって起動される。効率は、
以下を許容することでクライアント上にローカルにファイルをキャッシュすることにより
増大させる:
</para>

<variablelist>
	<varlistentry><term>Read-ahead:</term>
		<listitem><para>
<indexterm><primary>Read-ahead</primary></indexterm>
		クライアントはファイルのローカルコピーから読み、ネットワークの待ち時間を
		なくす。
		</para></listitem>
	</varlistentry>

	<varlistentry><term>Write caching:</term>
		<listitem><para>
<indexterm><primary>Write caching</primary></indexterm>
		クライアントはファイルのローカルコピーに書き込み、ネットワークの待ち
		間をなくす。
		</para></listitem>
	</varlistentry>

        <varlistentry><term>Lock caching:</term>
        <listitem><para>
<indexterm><primary>Lock caching</primary></indexterm>
		クライアントはアプリケーションをローカルにロックし、ネットワークの待ち
		間をなくす。
		</para></listitem>
        </varlistentry>
</variablelist>

<para>
<indexterm><primary>効率の増大</primary></indexterm>
<indexterm><primary>oplocks</primary></indexterm>
<indexterm><primary>deny-none</primary></indexterm>
oplocksによる効率の増大は、他のプロセスからの同時アクセスのためのファイルのステータスを
Windowsがモニタするために、deny-noneでオープンされていたとしても、ファイルに対する
排他的なアクセスを行うことによる。
</para>

<variablelist>
<title>Windowsは4つの種類のOplocksを定義する:</title>

		<varlistentry><term>Level1 Oplock</term>
			<listitem><para>
<indexterm><primary>Level1 Oplock</primary></indexterm>
<indexterm><primary>リダイレクタ</primary></indexterm>
<indexterm><primary>同時アクセス</primary></indexterm>
<indexterm><primary>キャッシュされたローカルファイル</primary></indexterm>
			リダイレクタは、ファイルがdeny none(同時アクセスを許可)で
			オープンしていることを確認し、ファイルに他のプロセスからの
			アクセスが無いことを検査し、oplocksが有効になっていることを
			確認し、次に、ファイルに対するdeny-all/read-write/exclusive
			アクセスを許可する。その後、クライアントはキャッシュされたローカル
			ファイルに対して操作を実行する。
			</para>

			<para>
<indexterm><primary>oplock break</primary></indexterm>
<indexterm><primary>ローカルロックのフラッシュ</primary></indexterm>
<indexterm><primary>遅延オープン</primary></indexterm>
<indexterm><primary>バイト幅ロッキング</primary></indexterm>
			もしも2番目のプロセスがファイルをオープンしようとすると、
			オリジナルのoplockをリダイレクタが"ブレーク"するまで
			オープンは待たされる。oplockブレークは、キャッシュしている
			クライアントに、サーバにローカルファイルを書き戻し、ローカルの
			ロックをフラッシュし、先読みしたデータを廃棄するように通知する。
			ブレークが完了し、遅延したオープンが許可され、多重プロセスが、
			強制的かバイト幅ロッキングオプションによって指示されたように、
			同時ファイルアクセスが出来るようになる。しかし、もしもオリジナルの
			ファイルがdeny-mode以外の共有モードの場合、次に、2番目の
			プロセスは、oplockがブレークしても、アクセスが制限されるか
			アクセスが拒否される。
			</para></listitem>
        </varlistentry>

        <varlistentry><term>Level2 Oplock</term>
                <listitem><para>
<indexterm><primary>Level2 Oplock</primary></indexterm>
<indexterm><primary>Level1 oplock</primary></indexterm>
<indexterm><primary>キャッシング</primary></indexterm>
		キャッシングを除いて、Level1 oplockのような機能は、すべての読み出しに
		対してのみ重要である。すべてのその他の操作は、サーバ上でファイルの
		ディスクへのコピーを実行する。
                </para></listitem>
        </varlistentry>

        <varlistentry><term>Filter Oplock</term>
                <listitem><para>
<indexterm><primary>Filter Oplock</primary></indexterm>
				ファイルへの書き込み又は削除アクセスを許可しない。
                </para></listitem>
        </varlistentry>

        <varlistentry><term>Batch Oplock</term>
                <listitem><para>
<indexterm><primary>Batch Oplock</primary></indexterm>
				ファイルのオープンとクローズを操作し、ファイル属性のキャッシュを行う。
                </para></listitem>
        </varlistentry>
</variablelist>

<para>
<indexterm><primary>oplocks</primary></indexterm>
oplocksはファイルシステムによって起動され、アプリケーションAPIではないということは重要な
詳細事項である。そのため、あるアプリケーションはoplockされたファイルをクローズできるが、
ファイルシステムはoplocksを放棄しない。oplockのブレークが発生したとき、ファイルシステムは
次に、2番目のプロセスによる、次のファイルオープンの準備中で、単純にファイルをクローズする。
</para>

<para>
<indexterm><primary>Opportunistic locking</primary></indexterm>
<indexterm><primary>client-side data caching</primary></indexterm>
<indexterm><primary>data caching</primary></indexterm>
<indexterm><primary>oplock break</primary></indexterm>
<emphasis>Opportunistic locking</emphasis>は、この機能に対して、実際には妥当ではない名前
である。この機能の真の利点は、クライアントサイドのデータキャッシングであり、oplocksは
ネットワーク上のディスクストレージにデータを書き戻すための、単なる通知メカニズムである。
oplocksの制限は、サーバとキャッシュしているクライアント間でのoplocksブレーク(通知)を
処理するためのメカニズムの信頼性である。もしもこの交換に失敗すると(通常、数多くの理由で
タイムアウトするという場合)、クライアントサイドキャッシングの優位性は否定される。
</para>

<para>
<indexterm><primary>クライアントサイドのキャッシング</primary></indexterm>
ユーザか管理者が考慮すべき、実際の決断点は、ローカルにクライアント上にキャッシュされる
複数のユーザのデータ間で共有するのは賢明であるかどうかと言うことである。多くの場合、
答えは「否」である。データをキャッシュするかしないかの決断は真の質問であり、そのため、
oplocksはクライアントサイドのキャッシングのトグルとして取り扱うべきである。クライアント
サイドのキャッシングが望ましく、信頼性がある場合、それを<quote>on</quote>にする。
クライアントサイドのキャッシングが不必要で、信頼性に欠け、あるいは反生産的な場合、
<quote>off</quote>にする。
</para>

<para>
<indexterm><primary>oplocks</primary></indexterm>
Oplocksは既定値ではすべての設定された共有上にSambaによって<quote>on</quote>に設定されて
いるので、もしも潜在的な利便性が、遅延の可能性より小さい場合、それぞれのケースで決定
するときには注意深く行うべきである。以下の推奨項目は、oplocksが効果的になる環境を特徴
づけるのに役に立つだろう。
</para>

<para>
<indexterm><primary>oplocks</primary></indexterm>
<indexterm><primary>high-availability</primary></indexterm>
Windowsのoplocksは簡易な効率向上機能である。これは堅牢でも信頼できるプロトコルではない。
oplocksのすべての実装は、考え得る性能と信頼性との間でのトレードオフとして評価される
べきである。信頼性は、上記での継続したルールが適用されないように減少する。oplockが
有効で、WAN上をまたいで、南太平洋の環礁の、高信頼性のサーバ上で、ミッション
クリティカルな、多人数で使う会社のデータベースが台風にさらされている状況を考えてみよう。
この設定はoplockの問題に遭遇するだろう。
</para>

<para>
<indexterm><primary>ミッションクリティカル</primary></indexterm>
Oplocksは、クライアントサイドでのデータキャッシングのための構成要素のトグルとして
扱われる時、クライアントの性能を理解するために有益であり得る。もしもデータのキャッシングが
さえぎられそうな場合、oplocksの使用は評価されるべきである。Sambaはすべての共有に対して
oplocksを既定値で有効にする。サーバ上の共有データ、サーバネットワークの信頼性と各共有の
oplocksの設定の使用法をクライアントに提供すべきであることに注意深く注意を払う。
ミッションクリティカルな領域、高信頼性環境では、データの整合性はしばしば優先度が高く
なる。複雑で高価な構成は、もしもクライアントがファイルサーバへの接続が切れた時、
継続したデータの可用性を提供するために、フェイルオーバによるサーバ切り替えがすぐに出来る
ことが出来るように、実装される。
</para>

<para>
<indexterm><primary>Windowsクライアントのフェイルオーバ</primary></indexterm>
<indexterm><primary>トランスポート層の接続断</primary></indexterm>
Windowsクライアントのフェイルオーバの動作は、確立しているTCP/IPトランスポートコネクション
に依存するという理由で、他のプラットフォームよりもアプリケーションの中断のリスクがより
大きい。もしも、ファイルサーバのフェールオーバとして接続が中断されたならば、新しい
セッションは再度確立せねばならない。トランスポート層が切断された時から正しく復帰するために
プログラミングされているWindowsクライアントはまれである。そのため、ほとんどの
アプリケーションは、ある種の中断を経験することになる。最悪の場合、アボートして再起動が
必要となる。
</para>

<para>
<indexterm><primary>caching writes</primary></indexterm>
<indexterm><primary>caching reads</primary></indexterm>
<indexterm><primary>oplock break</primary></indexterm>
もしもクライアントセッションが、oplocksのために、ローカルに書き込みと読み取りを
キャッシングしているなら、TCPの中断からアプリケーションの再起動または復帰のときに
データが喪失するだろう。ファイルサーバが復旧すると、oplocksのブレークはクライアント
には送信されない。この場合、先のセッションからの作業は失われる。oplocksが無効に
なっていて、リアルタイムにファイルサーバにクライアントがデータを書き込むという
シナリオを観察することで、フェイルオーバは、切断時に存在するディスク上のデータを
提供する。
</para>

<para>
ミッションクリティカルな、高可用性環境では、oplocksに対して厳重な注意をはらうべきである。
理想的には、広範囲なテストは、oplocksが有効かつ無効な状態で、すべての影響される
アプリケーションで行うべきである。
</para>

<sect3>
<title>共有の排他的なアクセス</title>

<para>
oplocksは、単一のユーザか、同時に1人のみのユーザで、排他的にアクセスされる共有に限定
される時に最も有効である。oplocksの本当の姿は、ローカルにクライアントでキャッシング
されているデータという理由により、キャッシングを中断する何らかの操作は遅延を引き起こす。
</para>

<para>
ホームディレクトリは、oplocksが問題ないと理解され、効率を得られる、最も明らかな例である。
</para>

</sect3>

<sect3>
<title>共有またはファイルに対する多重アクセス</title>

<para>
共有中のファイルへ各追加ユーザがoplocksを有効にしてアクセスすると、遅延の可能性と、
結果として生じる性能の低下が増大する。複数のユーザが、oplocksを有効にした共有上の
ファイルにアクセスする時、oplocksブレークの送受信と、の管理と、データのオフセットを
フラッシュするためにクライアントのキャッシングを他のクライアントが待つ間に結果として
生じる遅延の管理の影響は、キャッシュしているユーザの効率向上を相殺する。
</para>

<para>
oplocksを設定して各追加のクライアントがファイルにアクセスする時、潜在的な効率の
向上は否定され、最終的には効率のボトルネックとなる。
</para>

</sect3>

<sect3>
<title>UNIXまたはNFSクライアントがアクセスしたファイル</title>

<para>
<indexterm><primary>NFSクライアント</primary></indexterm>
<indexterm><primary>データの破壊</primary></indexterm>
ローカルのUNIXとNFSクライアントは強制的なファイルロックメカニズムなしでファイルにアクセス
する。そのため、それらクライアントプラットフォームは、ファイルをキャッシュしている
Windowsクライアントにサーバからのoplocksブレークを初期化できない。ローカルのUNIXか
NFSファイルアクセスはこのため、データが壊れるようなファイルを公開している、Windows
クライアントによってキャッシュされたファイルに書き込める。
</para>

<para>
もしも、ファイルがWindows間とローカルUNIXかNFSユーザによって共有されているならば、
oplocksはoffにする。
</para>

</sect3>

<sect3>
<title>遅くて信頼できないネットワーク</title>

<para>
<indexterm><primary>性能の向上</primary></indexterm>
<indexterm><primary>WAN</primary></indexterm>
<indexterm><primary>latency</primary></indexterm>
クライアントサイドの読み取りと書き込みのキャッシングが、回線上でそれらの読み書きを送る
上での大部分の差分を送る時に、oplocksが遭遇する性能向上の最も大きな可能性がある。
これは、ネットワークがとても遅く、詰まっているか分散している(WAN中の場合)には、頻繁に起きる。
しかし、ネットワークの遅延がoplocksメカニズムの信頼性に関して大きな影響があり、そのため、
潜在的に知覚できる効率の向上を十二分に相殺するoplocks問題を発生する見込みを増大する。
もちろん、もしもoplocksブレークが、決して送られる必要がなければ、これは、oplocksを利用
する最も効率的なシナリオである。
</para>

<para>
もしもネットワークが遅いか、信頼性がないばあいか、WANの場合、もしも複数のユーザが
同じファイルを定期的に開く事がある場合、決してoplocksを設定しないこと。
</para>

</sect3>

<sect3>
<title>マルチユーザデータベース</title>

<para>
<indexterm><primary>マルチユーザデータベース</primary></indexterm>
<indexterm><primary>management bottleneck</primary></indexterm>
<indexterm><primary>oplocks disabled</primary></indexterm>
マルチユーザデータベースは、その本質的な性質から、明らかに危険である。それらは通常不定
間隔でたくさんのユーザによって激しくアクセスされる。oplocksが有効になっている共有上で
マルチユーザデータベースを配置すると、Sambaサーバ上でのロッキング管理のボトルネックに
なるだろう。手作りあるいは所用製品のデータベースアプリケーションのどちらにせよ、
共有のoplocksは無効にすること。
</para>

</sect3>

<sect3>
<title>PDM Data Shares</title>

<para>
<indexterm><primary>PDM</primary></indexterm>
<indexterm><primary>Process data management</primary></indexterm>
<indexterm><primary>クライアントサイドのデータキャッシング</primary></indexterm>
<indexterm><primary>oplocksの管理</primary></indexterm>
<indexterm><primary>oplocksの無効化</primary></indexterm>
IMAN、EnoviaやCleacaseのようなProcess data management (PDM)アプリケーションはWindows
クライアントプラットフォームでの使用が増え、そのため、SMBによるデータ格納も増えている。
PDMアプリケーションは、重要なデータのセキュリティとアクセスのために、複数ユーザ環境を
管理する。一般的なPDM環境では、必要に応じてローカルにロードするデータは、洗練された
クライアントデザインのアプリケーションに関連づけられる。更に追加で、PDMアプリケーションは
通常各クライアントのデータ状態をモニタする。この場合、クライアントサイドのデータ
キャッシングは、ローカルのアプリケーションとPDMサーバで協調して保守するために、最も
残される。任意のキャッシング作業からクライアントOSを、任意のoplocks管理から、共有上で
oplocksを無効にすることによって取り除くことは適切である。
</para>

</sect3>

<sect3>
<title>Force Userに対する注意</title>

<para>
<indexterm><primary>oplock break</primary></indexterm>
Sambaには、&smb.conf;の変数によって定義されるどんなユーザにも、接続してきたユーザが
共有にアクセスする時に、ユーザを変更する<smbconfoption name="force user"/>という
パラメータを&smb.conf;中に含むことが出来る。もしもoplocksが共有上で有効になっている場合、
ユーザアクセス中の変更は、ユーザが明示的にファイルをロードしなくとも、クライアントに送信
するoplocksブレークを発生させる。ネットワークが遅いか信頼性がない場合、ファイルにアクセス
しているユーザなしでoplocksブレークが失われることがある。これは、oplocksブレークの喪失を
補うために、絶えず再接続するクライアントとして見た目の効率低下を引き起こす。
</para>

<para>
以下を組み合わせることを防ぐ:
</para>

<itemizedlist>
	<listitem><para>
	&smb.conf;中の共有定義中の<smbconfoption name="force user"/> 。
	</para></listitem>

	<listitem><para>
	遅いか信頼性のないネットワーク。
	</para></listitem>

	<listitem><para>
	Oplocksが有効。
	</para></listitem>
</itemizedlist>

</sect3>

<sect3>
<title>高度なSamba Oplocksパラメータ</title>

<para>
<indexterm><primary>oplockパラメータ</primary></indexterm>
<indexterm><primary>oplockのメカニズム</primary></indexterm>
<indexterm><primary>oplocksの実装</primary></indexterm>
Sambaはタイミングと使用レベルの計測のためにoplocksメカニズムの、種々のプロパティを
管理者が調整できるoplocksパラメータを提供する。これらのパラメータは、問題を引き起こす
ような環境中でoplocksを実装するために、すぐれた融通性を提供する。パラメータは、
<smbconfoption name="oplock break wait time"/>と
<smbconfoption name="oplock contention limit"/>である。
</para>

<para>
<indexterm><primary>turn oplocks off</primary></indexterm>
For most users, administrators, and environments, if these parameters
are required, then the better option is simply to turn oplocks off.
The Samba SWAT help text for both parameters reads: <quote>Do not change
this parameter unless you have read and understood the Samba oplock code.</quote>
This is good advice.
</para>

</sect3>

<sect3>
<title>Mission-Critical, High-Availability</title>

<para>
In mission-critical, high-availability environments, data integrity is
often a priority. Complex and expensive configurations are implemented
to ensure that if a client loses connectivity with a file server, a
failover replacement will be available immediately to provide
continuous data availability.
</para>

<para>
Windows client failover behavior is more at risk of application
interruption than other platforms because it is dependent upon an
established TCP transport connection. If the connection is interrupted
&smbmdash; as in a file server failover &smbmdash; a new session must be established.
It is rare for Windows client applications to be coded to recover
correctly from a transport connection loss; therefore, most applications
will experience some sort of interruption &smbmdash; at worst, abort and
require restarting.
</para>

<para>
If a client session has been caching writes and reads locally due to
oplocks, it is likely that the data will be lost when the
application restarts or recovers from the TCP interrupt. When the TCP
connection drops, the client state is lost. When the file server
recovers, an oplock break is not sent to the client. In this case, the
work from the prior session is lost. Observing this scenario with
oplocks disabled, if the client was writing data to the file server
real-time, then the failover will provide the data on disk as it
existed at the time of the disconnect.
</para>

<para>
In mission-critical, high-availability environments, careful attention
should be given to oplocks. Ideally, comprehensive
testing should be done with all affected applications with oplocks
enabled and disabled.
</para>

</sect3>
</sect2>
</sect1>

<sect1>
<title>Samba Oplocks Control</title>

<para>
Oplocks is a unique Windows file locking feature. It is
not really file locking, but is included in most discussions of Windows
file locking, so is considered a de facto locking feature.
Oplocks is actually part of the Windows client file
caching mechanism. It is not a particularly robust or reliable feature
when implemented on the variety of customized networks that exist in
enterprise computing.
</para>

<para>
Like Windows, Samba implements oplocks as a server-side
component of the client caching mechanism. Because of the lightweight
nature of the Windows feature design, effective configuration of
oplocks requires a good understanding of its limitations,
and then applying that understanding when configuring data access for
each particular customized network and client usage state.
</para>

<para>
Oplocks essentially means that the client is allowed to download and cache
a file on its hard drive while making changes; if a second client wants to access the
file, the first client receives a break and must synchronize the file back to the server.
This can give significant performance gains in some cases; some programs insist on
synchronizing the contents of the entire file back to the server for a single change.
</para>

<para>
Level1 Oplocks (also known as just plain <quote>oplocks</quote>) is another term for opportunistic locking.
</para>

<para>
Level2 Oplocks provides opportunistic locking for a file that will be treated as
<emphasis>read only</emphasis>. Typically this is used on files that are read-only or
on files that the client has no initial intention to write to at time of opening the file.
</para>

<para>
Kernel Oplocks are essentially a method that allows the Linux kernel to co-exist with
Samba's oplocked files, although this has provided better integration of MS Windows network
file locking with the underlying OS. SGI IRIX and Linux are the only two OSs that are
oplock-aware at this time.
</para>

<para>
Unless your system supports kernel oplocks, you should disable oplocks if you are
accessing the same files from both UNIX/Linux and SMB clients. Regardless, oplocks should
always be disabled if you are sharing a database file (e.g., Microsoft Access) between
multiple clients, because any break the first client receives will affect synchronization of
the entire file (not just the single record), which will result in a noticeable performance
impairment and, more likely, problems accessing the database in the first place. Notably,
Microsoft Outlook's personal folders (*.pst) react quite badly to oplocks. If in doubt,
disable oplocks and tune your system from that point.
</para>

<para>
If client-side caching is desirable and reliable on your network, you will benefit from
turning on oplocks. If your network is slow and/or unreliable, or you are sharing your
files among other file sharing mechanisms (e.g., NFS) or across a WAN, or multiple people
will be accessing the same files frequently, you probably will not benefit from the overhead
of your client sending oplock breaks and will instead want to disable oplocks for the share.
</para>

<para>
Another factor to consider is the perceived performance of file access. If oplocks provide no
measurable speed benefit on your network, it might not be worth the hassle of dealing with them.
</para>

<sect2>
<title>Example Configuration</title>

<para>
In the following section we examine two distinct aspects of Samba locking controls.
</para>

<sect3>
<title>Disabling Oplocks</title>

<para>
You can disable oplocks on a per-share basis with the following:
</para>

<para>
<smbconfblock>
<smbconfsection name="[acctdata]"/>
<smbconfoption name="oplocks">False</smbconfoption>
<smbconfoption name="level2 oplocks">False</smbconfoption>
</smbconfblock>
</para>

<para>
The default oplock type is Level1. Level2 oplocks are enabled on a per-share basis
in the &smb.conf; file.
</para>

<para>
Alternately, you could disable oplocks on a per-file basis within the share:
</para>

<para>
	<smbconfblock>
<smbconfoption name="veto oplock files">/*.mdb/*.MDB/*.dbf/*.DBF/</smbconfoption>
</smbconfblock>
</para>

<para>
If you are experiencing problems with oplocks, as apparent from Samba's log entries,
you may want to play it safe and disable oplocks and Level2 oplocks.
</para>

</sect3>

<sect3>
<title>Disabling Kernel Oplocks</title>

<para>
Kernel oplocks is an &smb.conf; parameter that notifies Samba (if
the UNIX kernel has the capability to send a Windows client an oplock
break) when a UNIX process is attempting to open the file that is
cached. This parameter addresses sharing files between UNIX and
Windows with oplocks enabled on the Samba server: the UNIX process
can open the file that is Oplocked (cached) by the Windows client and
the smbd process will not send an oplock break, which exposes the file
to the risk of data corruption. If the UNIX kernel has the ability to
send an oplock break, then the kernel oplocks parameter enables Samba
to send the oplock break. Kernel oplocks are enabled on a per-server
basis in the &smb.conf; file.
</para>

<para>
<smbconfblock>
<smbconfoption name="kernel oplocks">yes</smbconfoption>
</smbconfblock>
The default is no.
</para>

<para>
<emphasis>Veto oplocks</emphasis> is an &smb.conf; parameter that identifies specific files for
which oplocks are disabled. When a Windows client opens a file that
has been configured for veto oplocks, the client will not be granted
the oplock, and all operations will be executed on the original file on
disk instead of a client-cached file copy. By explicitly identifying
files that are shared with UNIX processes and disabling oplocks for
those files, the server-wide oplock configuration can be enabled to
allow Windows clients to utilize the performance benefit of file
caching without the risk of data corruption. Veto oplocks can be
enabled on a per-share basis, or globally for the entire server, in the
&smb.conf; file as shown in <link linkend="far1"/>.
</para>

<para>
<example id="far1">
<title>Share with Some Files Oplocked</title>
<smbconfblock>
<smbconfsection name="[global]"/>
<smbconfoption name="veto oplock files">/filename.htm/*.txt/</smbconfoption>

<smbconfsection name="[share_name]"/>
<smbconfoption name="veto oplock files">/*.exe/filename.ext/</smbconfoption>
</smbconfblock>
</example>
</para>

<para>
<smbconfoption name="oplock break wait time"/> is an &smb.conf; parameter
that adjusts the time interval for Samba to reply to an oplock break request. Samba recommends:
<quote>Do not change this parameter unless you have read and understood the Samba oplock code.</quote>
Oplock break wait time can only be configured globally in the &smb.conf; file as shown:
</para>

<para>
	<smbconfblock>
<smbconfoption name="oplock break wait time"> 0 (default)</smbconfoption>
</smbconfblock>
</para>

<para>
<emphasis>Oplock break contention limit</emphasis> is an &smb.conf; parameter that limits the
response of the Samba server to grant an oplock if the configured
number of contending clients reaches the limit specified by the parameter. Samba recommends
<quote>Do not change this parameter unless you have read and understood the Samba oplock code.</quote>
Oplock break contention limit can be enabled on a per-share basis, or globally for
the entire server, in the &smb.conf; file as shown in <link linkend="far3"/>.
</para>

<para>
<example id="far3">
<title>Configuration with Oplock Break Contention Limit</title>
<smbconfblock>
<smbconfsection name="[global]"/>
<smbconfoption name="oplock break contention limit"> 2 (default)</smbconfoption>

<smbconfsection name="[share_name]"/>
<smbconfoption name="oplock break contention limit"> 2 (default)</smbconfoption>
</smbconfblock>
</example>
</para>

</sect3>
</sect2>

</sect1>

<sect1>
<title>MS Windows Oplocks and Caching Controls</title>

<para>
There is a known issue when running applications (like Norton Antivirus) on a Windows 2000/ XP
workstation computer that can affect any application attempting to access shared database files
across a network. This is a result of a default setting configured in the Windows 2000/XP
operating system. When a workstation
attempts to access shared data files located on another Windows 2000/XP computer,
the Windows 2000/XP operating system will attempt to increase performance by locking the
files and caching information locally. When this occurs, the application is unable to
properly function, which results in an <quote>Access Denied</quote>
 error message being displayed during network operations.
</para>

<para>
All Windows operating systems in the NT family that act as database servers for data files
(meaning that data files are stored there and accessed by other Windows PCs) may need to
have oplocks disabled in order to minimize the risk of data file corruption.
This includes Windows 9x/Me, Windows NT, Windows 200x, and Windows XP.
<footnote><para>Microsoft has documented this in Knowledge Base article 300216.</para></footnote>
</para>

<para>
If you are using a Windows NT family workstation in place of a server, you must also
disable oplocks on that workstation. For example, if you use a
PC with the Windows NT Workstation operating system instead of Windows NT Server, and you
have data files located on it that are accessed from other Windows PCs, you may need to
disable oplocks on that system.
</para>

<para>
The major difference is the location in the Windows registry where the values for disabling
oplocks are entered. Instead of the LanManServer location, the LanManWorkstation location
may be used.
</para>

<para>
You can verify (change or add, if necessary) this registry value using the Windows
Registry Editor. When you change this registry value, you will have to reboot the PC
to ensure that the new setting goes into effect.
</para>

<para>
The location of the client registry entry for oplocks has changed in
Windows 2000 from the earlier location in Microsoft Windows NT.
</para>

<note><para>
Windows 2000 will still respect the EnableOplocks registry value used to disable oplocks
in earlier versions of Windows.
</para></note>

<para>
You can also deny the granting of oplocks by changing the following registry entries:
</para>

<para>
<programlisting>
	HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\MRXSmb\Parameters\

		OplocksDisabled REG_DWORD 0 or 1
		Default: 0 (not disabled)
</programlisting>
</para>

<note><para>
The OplocksDisabled registry value configures Windows clients to either request or not
request oplocks on a remote file. To disable oplocks, the value of
 OplocksDisabled must be set to 1.
</para></note>

<para>
<programlisting>
	HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanServer\Parameters

		EnableOplocks REG_DWORD 0 or 1
		Default: 1 (Enabled by Default)

		EnableOpLockForceClose REG_DWORD 0 or 1
		Default: 0 (Disabled by Default)
</programlisting>
</para>

<note><para>
The EnableOplocks value configures Windows-based servers (including Workstations sharing
files) to allow or deny oplocks on local files.
</para></note>

<para>
To force closure of open oplocks on close or program exit, EnableOpLockForceClose must be set to 1.
</para>

<para>
An illustration of how Level2 oplocks work follows:
</para>

<itemizedlist>
	<listitem><para>
	Station 1 opens the file requesting oplock.
	</para></listitem>
	<listitem><para>
	Since no other station has the file open, the server grants station 1 exclusive oplock.
	</para></listitem>
	<listitem><para>
	Station 2 opens the file requesting oplock.
	</para></listitem>
	<listitem><para>
	Since station 1 has not yet written to the file, the server asks station 1 to break
	to Level2 oplock.
	</para></listitem>
	<listitem><para>
	Station 1 complies by flushing locally buffered lock information to the server.
	</para></listitem>
	<listitem><para>
	Station 1 informs the server that it has broken to level2 Oplock (alternately,
	station 1 could have closed the file).
	</para></listitem>
	<listitem><para>
	The server responds to station 2's open request, granting it Level2 oplock.
	Other stations can likewise open the file and obtain Level2 oplock.
	</para></listitem>
	<listitem><para>
	Station 2 (or any station that has the file open) sends a write request SMB.
	The server returns the write response.
	</para></listitem>
	<listitem><para>
	The server asks all stations that have the file open to break to none, meaning no
	station holds any oplock on the file. Because the workstations can have no cached
	writes or locks at this point, they need not respond to the break-to-none advisory;
	all they need do is invalidate locally cashed read-ahead data.
	</para></listitem>
</itemizedlist>

<sect2>
<title>Workstation Service Entries</title>

<para><programlisting>
	\HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanWorkstation\Parameters

	UseOpportunisticLocking   REG_DWORD   0 or 1
	Default: 1 (true)
</programlisting></para>

<para>
This indicates whether the redirector should use oplocks performance
enhancement. This parameter should be disabled only to isolate problems.
</para>

</sect2>
<sect2>
<title>Server Service Entries</title>

<para><programlisting>
	\HKEY_LOCAL_MACHINE\System\
		CurrentControlSet\Services\LanmanServer\Parameters

	EnableOplocks   REG_DWORD   0 or 1
	Default: 1 (true)
</programlisting></para>

<para>
This specifies whether the server allows clients to use oplocks on files. Oplocks are a
significant performance enhancement, but have the potential to cause lost cached
data on some networks, particularly WANs.
</para>

<para><programlisting>
	MinLinkThroughput   REG_DWORD   0 to infinite bytes per second
	Default: 0
</programlisting></para>

<para>
This specifies the minimum link throughput allowed by the server before it disables
raw I/O and oplocks for this connection.
</para>

<para><programlisting>
	MaxLinkDelay   REG_DWORD   0 to 100,000 seconds
	Default: 60
</programlisting></para>

<para>
This specifies the maximum time allowed for a link delay. If delays exceed this number,
the server disables raw I/O and oplocks for this connection.
</para>

<para><programlisting>
	OplockBreakWait   REG_DWORD   10 to 180 seconds
	Default: 35
</programlisting></para>

<para>
This specifies the time that the server waits for a client to respond to an oplock break
request. Smaller values can allow detection of crashed clients more quickly but can
potentially cause loss of cached data.
</para>

</sect2>
</sect1>

<sect1>
<title>Persistent Data Corruption</title>

<para>
If you have applied all of the settings discussed in this chapter but data corruption problems
and other symptoms persist, here are some additional things to check out.
</para>

<para>
We have credible reports from developers that faulty network hardware, such as a single
faulty network card, can cause symptoms similar to read caching and data corruption.
If you see persistent data corruption even after repeated re-indexing, you may have to
rebuild the data files in question. This involves creating a new data file with the
same definition as the file to be rebuilt and transferring the data from the old file
to the new one. There are several known methods for doing this that can be found in
our knowledge base.
</para>

</sect1>

<sect1>
<title>Common Errors</title>

<para>
In some sites locking problems surface as soon as a server is installed; in other sites
locking problems may not surface for a long time. Almost without exception, when a locking
problem does surface, it will cause embarrassment and potential data corruption.
</para>

<para>
Over the past few years there have been a number of complaints on the Samba mailing lists
that have claimed that Samba caused data corruption. Three causes have been identified
so far:
</para>

<itemizedlist>
	<listitem><para>
	Incorrect configuration of oplocks (incompatible with the application
	being used). This is a common problem even where MS Windows NT4 or MS Windows
	200x-based servers were in use. It is imperative that the software application vendors'
	instructions for configuration of file locking should be followed. If in doubt,
	disable oplocks on both the server and the client. Disabling of all forms of file
	caching on the MS Windows client may be necessary also.
	</para></listitem>

	<listitem><para>
	Defective network cards, cables, or hubs/switches. This is generally a more
	prevalent factor with low-cost networking hardware, although occasionally there
	have also been problems with incompatibilities in more up-market hardware.
	</para></listitem>

	<listitem><para>
	There have been some random reports of Samba log files being written over data
	files. This has been reported by very few sites (about five in the past 3 years)
	and all attempts to reproduce the problem have failed. The Samba Team has been
	unable to catch this happening and thus unable to isolate any particular
	cause. Considering the millions of systems that use Samba, for the sites that have
	been affected by this as well as for the Samba Team, this is a frustrating and
	vexing challenge. If you see this type of thing happening, please create a bug
	report on Samba <ulink url="https://bugzilla.samba.org">Bugzilla</ulink> without delay.
	Make sure that you give as much information as you possibly can to help isolate the
	cause and to allow replication of the problem (an essential step in problem isolation and correction).
	</para></listitem>
</itemizedlist>

	<sect2>
	<title>locking.tdb Error Messages</title>

	<para>
		<quote>
			We are seeing lots of errors in the Samba logs, like:
		</quote>
<programlisting>
tdb(/usr/local/samba_2.2.7/var/locks/locking.tdb): rec_read bad magic
 0x4d6f4b61 at offset=36116
</programlisting>

		<quote>
			What do these mean?
		</quote>
	</para>

	<para>
	This error indicates a corrupted tdb. Stop all instances of smbd, delete locking.tdb, and restart smbd.
	</para>

	</sect2>

	<sect2>
		<title>Problems Saving Files in MS Office on Windows XP</title>

<indexterm><primary>KB 812937</primary></indexterm>
		<para>This is a bug in Windows XP. More information can be 
		found in <ulink url="http://support.microsoft.com/?id=812937">Microsoft Knowledge Base article 812937</ulink></para>.

	</sect2>

	<sect2>

		<title>Long Delays Deleting Files over Network with XP SP1</title>
		
		<para><quote>It sometimes takes approximately 35 seconds to delete files over the network after XP SP1 has been applied.</quote></para>

<indexterm><primary>KB 811492</primary></indexterm>
		<para>This is a bug in Windows XP. More information can be found in <ulink url="http://support.microsoft.com/?id=811492">
				Microsoft Knowledge Base article 811492</ulink></para>.
	</sect2>

</sect1>

<sect1>
<title>Additional Reading</title>

<para>
You may want to check for an updated documentation regarding file and record locking issues on the Microsoft
<ulink url="http://support.microsoft.com/">Support</ulink> web site. Additionally, search for the word
<literal>locking</literal> on the Samba <ulink url="http://www.samba.org/">web</ulink> site.
</para>

<para>
Section of the Microsoft MSDN Library on opportunistic locking: 
</para>

<para>
<indexterm><primary>KB 224992</primary></indexterm>
Microsoft Knowledge Base, <quote>Maintaining Transactional Integrity with OPLOCKS</quote>,
Microsoft Corporation, April 1999, <ulink noescape="1" url="http://support.microsoft.com/?id=224992">Microsoft
KB Article 224992</ulink>.
</para>

<para>
<indexterm><primary>KB 296264</primary></indexterm>
Microsoft Knowledge Base, <quote>Configuring Opportunistic Locking in Windows 2000</quote>,
Microsoft Corporation, April 2001 <ulink noescape="1" url="http://support.microsoft.com/?id=296264">Microsoft KB Article 296264</ulink>.
</para>

<para>
<indexterm><primary>KB 129202</primary></indexterm>
Microsoft Knowledge Base, <quote>PC Ext: Explanation of Opportunistic Locking on Windows NT</quote>,
Microsoft Corporation, April 1995 <ulink noescape="1" url="http://support.microsoft.com/?id=129202">Microsoft
KB Article 129202</ulink>.
</para>

</sect1>
</chapter>
