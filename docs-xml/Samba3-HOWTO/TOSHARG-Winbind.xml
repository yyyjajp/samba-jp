<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="winbind">

<chapterinfo>
	<author>
		<firstname>Tim</firstname><surname>Potter</surname>
		<affiliation>
			<orgname>Samba Team</orgname>
			<address><email>tpot@linuxcare.com.au</email></address>
		</affiliation>
	</author>
	&author.tridge;
	<author>
		<firstname>Naag</firstname><surname>Mummaneni</surname>
		<affiliation>
			<address><email>getnag@rediffmail.com</email></address>
		</affiliation>
		<contrib>Notes for Solaris</contrib>
	</author>
	<author>
		<firstname>John</firstname><surname>Trostel</surname>
		<affiliation>
			<orgname>SNAP</orgname>
			<address><email>jtrostel@snapserver.com</email></address>
		</affiliation>
	</author>
	&author.jelmer;
	&author.jht;
	<pubdate>June 15, 2005</pubdate>
</chapterinfo>

<title>Winbind: ドメインアカウントの使用</title>

<sect1>
	<title>機能と利便性</title>

	<para>
<indexterm><primary>聖杯</primary></indexterm>
<indexterm><primary>混成のコンピューティング</primary></indexterm>
	UNIXとMicrosoft Windows NTを統合化されたログオンで統合することは、長い間
	異機種間コンピューティング環境において<quote>聖杯</quote>と考えられてきた。
	</para>

	<para>
<indexterm><primary>相互運用性</primary></indexterm>
<indexterm><primary>ドメインユーザ</primary></indexterm>
<indexterm><primary>ドメイングループ</primary></indexterm>
<indexterm><primary>グループの所有者</primary></indexterm>
	もう一つ、この機能がなければ、UNIXとMicrosoft Windowsネットワークの相互運用性が
	著しく限定されるというものがある。UNIXシステム全般に渡ってファイル共有を
	可能にし、ドメインユーザとグループの所有者を整合性のある形で割り当てられる
	機構がなければならない。
	</para>

	<para>
<indexterm><primary>Pluggable Authentication Modules</primary><see>PAM</see></indexterm>
<indexterm><primary>winbind</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>RPC</primary></indexterm>
	<emphasis>winbind</emphasis>は、Sambaシステム中で、統一されたログオンの
	問題を解決するコンポーネントである。Winbind は、Microsoft RPC コール、
	Pluggable Authentication Modules (PAM)、Name Service SwitchのUNIXの実装を
	使用して、Windows NTのドメインユーザがUNIXマシン上のUNIXユーザとして動作
	できるようにする。この章は、Winbindシステムについて、その機能、設定の仕方、
	及び内部的にどのように動いているのかを説明する。
	</para>

	<para>
	Winbind は、三つの別々の機能を提供する。
	</para>

	<itemizedlist>
		<listitem><para>
<indexterm><primary>ADS</primary></indexterm>
<indexterm><primary>NT4 ドメイン</primary></indexterm>
		ユーザの本人確認情報の認証(PAM経由)。これは、Windows NT4ドメインか
		(Sambaドメインも含む)Active Directoryドメインからユーザとグループ
		アカウントを使ってUNIX/Linuxシステムにログオンすることを可能にする。
		</para></listitem>

		<listitem><para>
<indexterm><primary>IDの解決</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
		IDの解決(NSS経由)。これは、winbindが使われなかった時の既定値である。
		</para></listitem>

		<listitem><para>
<indexterm><primary>UID</primary></indexterm>
<indexterm><primary>GID</primary></indexterm>
<indexterm><primary>SID</primary></indexterm>
<indexterm><primary>idmap uid</primary></indexterm>
<indexterm><primary>idmap gid</primary></indexterm>
<indexterm><primary>idmap backend</primary></indexterm>
<indexterm><primary>LDAP</primary></indexterm>
		Winbindは、winbind_idmap.tdbと呼ばれるデータベースを維持し、その中に、
		UNIX UID/GIDとNT SID間のマッピング情報を格納する。このマッピングは、
		ローカルUID/GIDを持たないユーザまたはグループにのみ使用する。
		idmap uid/gid の範囲から割り当てられ、NTのSIDにマッピングされた
		UID/GIDが格納される。<parameter>idmap backend</parameter>が
		<constant>ldap:ldap://hostname[:389]</constant>に指定されている場合、
		ローカルのマッピングを使用する代わりに、Winbindは、この情報をLDAP
		データベースから取得する。
		</para></listitem>
	</itemizedlist>

	<note><para>
	<indexterm><primary>winbindd</primary></indexterm>
	<indexterm><primary>sambaの起動</primary><secondary>winbindd</secondary></indexterm>
<indexterm><primary>/etc/passwd</primary></indexterm>
<indexterm><primary>/etc/group</primary></indexterm>
<indexterm><primary>smbd</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
	もしも<command>winbindd</command>が実行中ではないとき、smbd
	(<command>winbindd</command>を呼び出す方)は、代替手段として純粋にローカルな
	<filename>/etc/passwd</filename>と<filename>/etc/group</filename>からの情報を
	使用することにし、動的マッピングは使用しない。OSでNSSが有効になっている場合、
	ユーザとグループ情報の解決はNSS経由で行われる。
	</para></note>


	<figure id="winbind_idmap">
	<title>Winbind Idmap</title>
	<imagefile scale="45">idmap_winbind_no_loop</imagefile>
	</figure>

</sect1>


<sect1>
	<title>はじめに</title>

	<para>UNIXとMicrosoft Windows NTでは、ユーザ及びグループ情報の見せ方のモデルも、
	それを実行するために使用している技術も異なるのは周知の事実である。これが、
	二つのシステムを統合して、満足の行く運用をすることを困難にしてきた。
	</para>

	<para>
<indexterm><primary>同期の問題</primary></indexterm>
<indexterm><primary>パスワード</primary></indexterm>
	これに対してよく行われる解決策は、UNIXとWindowsの両システム上に全く同名の
	ユーザアカウントを作成し、Sambaを使用して、両システム間のファイルサービスと
	印刷サービスを提供するというやり方であった。ただし、この解決策は、双方の
	マシンにユーザを追加したり削除したりする作業が面倒でパスワードも2セット
	持たなければならず、その両方がUNIXとWindowsシステム間の同期のずれの問題に
	つながり、ユーザの混乱を招くという、完璧には程遠いものである。</para>

	<para>UNIX マシンのための統一されたログオンという問題を、次のように三つの
	構成要素に分けることができる:</para>

	<itemizedlist>
		<listitem><para>Windows NTのユーザ及びグループ情報を取得する。
		</para></listitem>

		<listitem><para>Windows NT ユーザを認証する。
		</para></listitem>

		<listitem><para>Windows NT ユーザのためにパスワードを変更する。
		</para></listitem>
	</itemizedlist>


	<para>
<indexterm><primary>統一されたログオン</primary></indexterm>
<indexterm><primary>情報の複製</primary></indexterm>
	理想的には、統一されたログオンという問題の解決方法は、UNIXマシン上に情報を複製する
	ことなく、上記の問題を全て満足させ、しかも、 ユーザやグループ情報をどちらの
	システムで維持しても、システム管理者の仕事を増やさないというものであってほしい。
	Winbind システムは、統一されたログオンという問題の三つの構成要素を簡単に優雅に
	こなすソリューションを提供するものである。
	problem.</para>
</sect1>


<sect1>
	<title>Winbindが提供するもの</title>

	<para>
<indexterm><primary>Windowsアカウント管理</primary></indexterm>
<indexterm><primary>UNIXユーザ</primary></indexterm>
<indexterm><primary>UNIXグループ</primary></indexterm>
<indexterm><primary>NTドメイン</primary></indexterm>
	Winbindは、UNIXとWindows NTのアカウント管理を、UNIXマシンがNTドメインの完全な
	メンバになることを可能にすることによって統一する。一旦これを行えば、UNIX
	マシンは、NTユーザやグループをあたかも<quote>ネイティブな</quote>UNIXユーザや
	グループであるかのように見ることができるようなり、UNIXのみの環境でNIS+を使用
	するのとほぼ同様に、NTドメインを使用することができるようになる。</para>

	<para>
<indexterm><primary>Winbind hooks</primary></indexterm>
<indexterm><primary>ドメインコントローラ</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>リダイレクション</primary></indexterm>
	その結果、UNIX マシン上のプログラムのいずれかが、OSにユーザ名やグループ名の検索を
	依頼すると、指定されたドメインを担当する NT のドメインコントローラにその検索を
	依頼することにより、問い合わせは解決する。Winbind は低レベル(Cライブラリ内の
	NSS名前解決モジュール経由)でOSに繋がるので、NT ドメインコントローラへの上記の
	リダイレクションは、完全に透過である。</para>

	<para>
<indexterm><primary>ユーザとグループ</primary></indexterm>
<indexterm><primary>ドメインユーザ</primary></indexterm>
	UNIXマシンのユーザは、<quote>ネイティブの</quote>UNIX名を使用するのと同様に、
	NTユーザー名とグループ名を使用することができる。ユーザはファイルをchownして、
	NTドメインユーザの所有に変えることもでき、UNIXマシンにログインしてドメイン
	ユーザとしてUNIXのX Window Systemセッションを実行することもできる。</para>

	<para>
<indexterm><primary>ドメインコントローラ</primary></indexterm>
	Winbindが使用されていることが明らかにわかるところは、ユーザ及びグループの名前が
	<constant>DOMAIN\user</constant>と<constant>DOMAIN\group</constant>の形を取ると
	いう点だけである。これは、Winbind が、信頼関係のあるドメインに参照するの特定の
	検索について、ドメインコントローラへのリダイレクト決めるために必要である。</para>

	<para>
<indexterm><primary>PAMが有効</primary></indexterm>
<indexterm><primary>ドメインコントローラ</primary></indexterm>
	さらに、Winbind は、PAMシステムのhookとしての認証サービスを提供し、NTドメインを
	経由して、PAM対応のあらゆるアプリケーションに対して認証を行う。この機能は、一カ所
	(ドメインコントローラ上)に全てのパスワードが格納されるため、システム間の
	パスワード同期の問題を解消する。</para>

	<sect2>
		<title>対象となるユーザ</title>

		<para>
<indexterm><primary>基盤</primary></indexterm>
		NTベースのドメイン基盤がすでにあり、それにUNIX ワークステーションか
		サーバを組み入れたいという要望のある組織がWinbindの対象となる。Winbind
		より、このような組織は別個のアカウント基盤を管理する必要なく、UNIX
		ワークステーションを展開することができる。これは、NTベースの組織にUNIX
		ワークステーションを展開するための間接費を大幅に軽減する。</para>

		<para>
<indexterm><primary>アプライアンス</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
		Winbind のもう一つの興味深い使用方法は、UNIXベースの装置の中心部分に
		使用することである。Microsoftベースのネットワークにファイルサービスと
		印刷サービスを提供する装置は、Winbindを使用することで、ドメインに
		シームレスに統合される。</para>
	</sect2>

	<sect2>
	<title>外部のSIDの取り扱い</title>

	<para>
<indexterm><primary>foreign SID</primary></indexterm>
	<emphasis>外部のSID(foreign SID)</emphasis>という単語は、特定の環境に依存しない
	反応としてしばしば見受けられる。以下はSambaメーリングリスト上で起きたやりとりを
	書化したものである。これは、winbindの使用に関連してしばしば現れる混乱の良い例で
	ある。
	</para>

	<para>
<indexterm><primary>ローカルドメイン</primary></indexterm>
	事実:Winbindはローカルドメインの一部でないワークステーションを使うユーザを
	扱う必要がある。
	</para>

	<para>
<indexterm><primary>PDC</primary></indexterm>
	対応:<quote>なぜ?私はwinbindなしで長い間ドメインに所属していないワークステーション
	をSambaとともに使っている。winbindは他のSamba/Windows PDCによって制御される
	ドメイン中のメンバサーバとしてのSamba用ではないかと思う。</quote>
	</para>

	<para>
<indexterm><primary>UID</primary></indexterm>
<indexterm><primary>GID</primary></indexterm>
<indexterm><primary>foreign user</primary></indexterm>
	もしも、SambaサーバがローカルSambaドメイン以外のドメインからアクセスされる
	か、もしも、ローカルドメインメンバでないマシンからアクセスされる場合、winbindは
	Sambaドメインのメンバであるユーザから分離された外部のユーザの識別情報を保持する
	めの割り当てられた領域からUIDとGIDを割り当てる。
	</para>

	<para>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>ドメインメンバ</primary></indexterm>
<indexterm><primary>ドメイン非メンバ</primary></indexterm>
<indexterm><primary>SID</primary></indexterm>
	これは、winbindは、ドメインメンバとドメイン非メンバのワークステーションがある、
	単一のSambaPDCがローカルネットワーク上にある場合に甚だしく有用である。もしも、
	winbindが使われないと、ドメインのメンバでないWindowsワークステーション上の
	georgeというユーザはPDCとして動作しているSambaサーバのアカウントデータベース
	中のgeorgeと呼ばれるユーザのファイルにアクセスできる。winbindが使われると、
	既定値の状態は、ローカルユーザのgeorgeがDOMAIN\georgeというアカウントとして
	扱われ、外部(ドメインのメンバでない)アカウントは、おのおの別のSIDを持つために
	MACHINE\georgeとして扱われる。
	</para>

	</sect2>
</sect1>



<sect1>
	<title>Winbindの動き方</title>

	<para>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>UNIXドメインソケット</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>PAM</primary></indexterm>
	Winbindシステムは、クライアント/サーバアーキテクチャを想定し設計されたもので
	ある。長時間走り続ける<command>winbindd</command>デーモンがUNIXドメイン
	ソケット上でリクエストが来るのを待つ。これらのリクエストは、NSS及びPAM
	クライアントにより生成され、順番に処理される。</para>

	<para>Winbind を実装するのに使用されている技術を以下に詳述する。</para>

	<sect2>
		<title>Microsoft Remote Procedure Calls</title>

		<para>
<indexterm><primary>Microsoft Remote Procedure Call</primary><see>MSRPC</see></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>リモート管理</primary></indexterm>
<indexterm><primary>ユーザ認証</primary></indexterm>
<indexterm><primary>印刷スプーリング</primary></indexterm>
		過去数年間、Sambaチームの多くのメンバが、Microsoftリモートプロシージャ
		コール(MSRPC)システムの各側面を解明しようと努力してきた。このシステムは、
		リモート管理、ユーザ認証、印刷スプーリングを含むWindows NTマシン間の
		ネットワーク関連操作の大半に使用されている。当初、Sambaへのプライマリ
		ドメインコントローラ(PDC)機能の実装を支援するために 着手した作業で
		あったが、結果としてそれ以外の目的に使用できる一連のコードを得ることが
		できた。
		</para>

		<para>
<indexterm><primary>MSRPC</primary></indexterm>
<indexterm><primary>ドメインユーザの列挙</primary></indexterm>
<indexterm><primary>ドメイングループの列挙</primary></indexterm>
		winbind はドメインユーザとグループを列挙し、個々のユーザやグループの詳細
		情報を取得するために、各種のMSRPC コールを使用する。他のMSRPC コールは、
		NTドメインユーザを認証し、ユーザのパスワードを変更するために使用できる。
		Windows PDCに、直接ユーザ及びグループ情報を問い合わせることで、Winbindは、
		NTのアカウント情報をUNIXユーザ名とグループ名にマッピングする。
		</para>
	</sect2>

	<sect2>
		<title>Microsoft Active Directoryサービス</title>

		<para>
<indexterm><primary>LDAP</primary></indexterm>
<indexterm><primary>Kerberos</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>ネイティブモード</primary></indexterm>
		2001年後半より、SambaはNT4のRPC サービスではなく、<quote>ネイティブモード</quote>
		のプロトコルを使用して、Microsoft Windows 2000とやり取りする機能を持つ
		ようになった。LDAP及びKerberosを使用し、winbindを走らせている ドメイン
		メンバは、Windows 200xクライアントの世界で行われるのと全く同じように、
		ユーザとグループを列挙でき、そうすることによってより効率的で効果的な
		winbind の実装を提供する。
		</para>
	</sect2>

	<sect2>
		<title>Name Service Switch</title>

		<para>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>ネットワークに繋がったワークステーション</primary></indexterm>
<indexterm><primary>NIS</primary></indexterm>
<indexterm><primary>DNS</primary></indexterm>
		Name Service SwitchまたはNSSは、多くのUNIX OSに存在する機能である。
		これは、ホスト名、メールの別名、ユーザ情報などのシステム情報を、異なる
		ソースから解決することを可能にする。例えば、スタンドアロンのUNIXワーク
		ステーションは、ローカルのファイルシステムに格納されている一連のフラット
		ファイルからシステム情報を解決できる。ネットワークに繋がったワーク
		ステーションは、最初にローカルファイルからシステム情報を解決しようとし、
		次にユーザ情報についてNISデータベースに問い合わせるか、あるいは、ホスト名
		情報についてDNS サーバに聞くことができる。</para>

		<para>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>MSRPC</primary></indexterm>
<indexterm><primary>信頼されたドメイン</primary></indexterm>
<indexterm><primary>ローカルユーザ</primary></indexterm>
<indexterm><primary>ローカルグループ</primary></indexterm>
		UNIXユーザ名とグループの解決の際、NSSのAPIは、winbind が自分をシステム
		情報のソースとして見せることを可能にする。winbindは、このインタフェースと
		MSRPCコールを使用して、Windows NTサーバから取得した情報を使用して、
		アカウント列挙の新しいソースを提供する。標準のUNIXライブラリコールを
		利用して、winbind を走らせているUNIXマシン上でユーザとグループを列挙させ、
		NTドメインのみならず、信頼関係のあるいずれのドメインでもその全ユーザと
		グループを、あたかも、ローカルユーザやグループのように見ることができる。
		</para>

		<para>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>/etc/nsswitch.conf</primary></indexterm>
<indexterm><primary>passwd</primary></indexterm>
		NSSの基本制御ファイルは<filename>/etc/nsswitch.conf</filename>である。
		UNIXアプリケーションが検索を行うと、Cライブラリは要求されたサービス
		タイプに一致する列を<filename>/etc/nsswitch.conf</filename>の中で探す。
		例えば、ユーザ名またはグループ名の検索の場合、<quote>passwd</quote>の
		サービスタイプが使用される。設定の中のこの列が、そのサービスのどの
		実装が、どういう順番で試行されるべきか指定している。もし、passwdの
		設定列が以下のようになっている場合:
<screen>
passwd: files example
</screen>
<indexterm><primary>/lib/libnss_files.so</primary></indexterm>
<indexterm><primary>/lib/libnss_example.so</primary></indexterm>
<indexterm><primary>resolver functions</primary></indexterm>
		Cライブラリは、最初に<filename>/lib/libnss_files.so</filename>と呼ばれる
		モジュールをロードし、次に<filename>/lib/libnss_example.so</filename>
		モジュールをロードする。Cライブラリはこれらのモジュールを順番に動的
		ロードし、モジュール内の解決機能を呼んでリクエストを解決しようとする。
		要求が解決されると、Cライブラリ は、その結果をアプリケーションに返す。
		</para>

		<para>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>libnss_winbind.so</primary></indexterm>
<indexterm><primary>/etc/nsswitch.conf</primary></indexterm>
		このNSSインタフェースは、OSへのフックのための、Winbindへの簡単なしくみを
		提供する。必要な手続きは、<filename>/lib/</filename>の中に
		<filename>libnss_winbind.so</filename>を書き、次に適切な場所で
		 <filename>/etc/nsswitch.conf</filename>に<quote>winbind</quote>を追加
		するだけである。これで、Cライブラリは、Winbindを呼んでユーザ名や
		グループ名を解決できるようになる。
		</para>
	</sect2>

	<sect2>
		<title>Pluggable Authentication Modules</title>

		<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>認証方法</primary></indexterm>
<indexterm><primary>認証</primary></indexterm>
<indexterm><primary>NISデータベース</primary></indexterm>
		PAMは、認証と認証技術を抽象化するものである。PAMモジュールを使用すると、
		異なるシステムアプリケーション用にそれぞれ異なる認証方法を指定でき、
		しかも、これらのアプリーケーションを再コンパイルする必要はない。
		PAM はまた、特別なポリシーを認証に実装するためにも有用である。例えば、
		システム管理者は、ローカルなパスワードファイルに格納されたユーザからは
		コンソールログインのみを許可し、NISデータベースから解決されるユーザに
		ついては、ネットワーク経由のログインを許可することができる。
		</para>

		<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>認証管理</primary></indexterm>
<indexterm><primary>パスワード管理</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
		Winbind は、認証管理とパスワード管理のPAMインタフェースを使用して、
		Windows NTユーザをUNIXシステムに統合する。これにより、 Windows NT
		ユーザはUNIXマシンにログインでき、適切なPDCの認証を受けることが
		できるようになる。このようなユーザはパスワードの変更もできる上、
		その変更内容をPDCに直に反映させることができる。
		</para>

		<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>/etc/pam.d/</primary></indexterm>
<indexterm><primary>pam_winbind.so</primary></indexterm>
<indexterm><primary>/lib/security/</primary></indexterm>
		PAMは、認証を必要とするサービスごとに、<filename>/etc/pam.d/</filename>の
		ディレクトリに管理ファイルを設けて設定する。アプリケーションが認証要求を
		出すと、Cライブラリ内のPAMコードが、認証を行うために、どのモジュールを
		どの順番でロードするべきかを決定するためにこの管理ファイルを検索する。
		このインタフェースにより、Winbindに新しい認証サービスを追加することが
		簡単になる。必要な手順は、<filename>/lib/security/</filename>に
		<filename>pam_winbind.so</filename>モジュールをコピーすることと、
		Winbind 経由の認証を可能にするために、関連するサービスのPAM管理ファイルを
		更新することである。詳細は、
		<link linkend="pam">PAMベースの分散型認証</link>のPAMの説明を参照のこと。
		</para>
	</sect2>

	<sect2>
		<title>ユーザとグループIDの割り当て</title>

		<para>
<indexterm><primary>RID</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>UNIX ID</primary></indexterm>
		Windows NT/200xでユーザまたはグループが作成されると、数字で構成される
		相対ID(RID)を割り当てられる。これは、UNIXとは幾分異なる。UNIXでは、
		ユーザIDに使用される数字の範囲と、グループIDに使用される数字の範囲が
		別々になっている。RIDをUNIXのIDに変換する、またはその逆を行うのが
		Winbindの仕事である。Winbindを設定する際、UNIXユーザIDのスペースの
		一部とUNIX グループIDのスペースの一部を、Windows NTのユーザと
		グループを格納する場所である。Windows NTユーザが最初に解決されるとき、
		上記の範囲の中から次の空き番号をUNIX上のIDとして割り当てる。この
		同じプロセスがWindows NTグループに対しても適用される。こうして一定の
		時間が経つと、全てのWindows NTユーザとグループはWinbindにより、対応
		するUNIXユーザIDとグループIDへマッピングされることになる。
		</para>

		<para>
<indexterm><primary>IDマッピングデータベース</primary></indexterm>
<indexterm><primary>tdb</primary></indexterm>
<indexterm><primary>UNIX ID</primary></indexterm>
<indexterm><primary>RID</primary></indexterm>
		このマッピングの結果は、tdbのデータベース内のIDマッピングデータベースに
		一貫して格納されていく。これにより、RIDが一貫した方法でUNIXのIDに
		マッピングされていくことを確保している。
		</para>
	</sect2>

	<sect2>
		<title>結果のキャッシュ保存</title>

		<para>
<indexterm><primary>SAM</primary></indexterm>
<indexterm><primary>caching scheme</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>ADS</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
		Active Directoryシステムは、数多くのユーザ名やグループ名の検索を発行
		する。 これらの検索に係るネットワークの負担を軽減するため、Winbindは、
		NTドメインコントローラから供給されるSAM シーケンス番号に基づいて、
		キャッシュに保存する。PDCから返されたユーザ情報やグループ情報は、
		同じくPDCから返されたシーケンス番号と一緒に、Winbindによってキャッシュに
		保存される。ユーザ情報やグループ情報が変更される度に、Windows NTは
		シーケンス番号を増やす。キャッシュに保存されたエントリが満了になる
		ときに、シーケンス番号をPDC からリクエストし、キャッシュのエントリの
		シーケンス番号と比較する。番号が一致しないときは、キャッシュに保存された
		情報を捨て、PDCから直接更新情報をもらうように更新を行う。
		</para>
	</sect2>
</sect1>


<sect1>
	<title>インストールと設定</title>

<sect2>
<title>はじめに</title>

<para>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>認証制御</primary></indexterm>
この節では、Winbindを入手して使えるようにするまでの手順を説明する。WinbindはNTまたは
Windows 200xの PDCを通して、Windowsのドメインユーザにtelnetやftpのような通常のサービス
と、Sambaの各種サービスのためのアクセス制御と認証管理の機能を提供することができる。
</para>

<itemizedlist>
<listitem>
	<para>
	<emphasis>どうして、これをやるべきなのか?</emphasis>
	</para>

	<para>
<indexterm><primary>Samba管理者</primary></indexterm>
<indexterm><primary>認証メカニズム</primary></indexterm>
<indexterm><primary>ドメインメンバ</primary></indexterm>
<indexterm><primary>アカウント</primary></indexterm>
これにより、Samba管理者がドメインメンバの認証のために、Windows NT/200x PDCの認証機構を
頼れるようになる。Windows NT/200xユーザは、Sambaサーバ上に別のアカウントを持つ必要が
なくなる。
	</para>
</listitem>

<listitem>
	<para>
	<emphasis>この文書は誰が読むべきものか?</emphasis>
	</para>

	<para>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>Windows NT/200x</primary></indexterm>
この文書はシステム管理者のためのものである。この文書は、Sambaをファイルサーバ上に実装する
予定であり、既存のWindows NT/200xユーザを、PDCからSambaサーバへ(比較的簡単に)統合したい
場合のものである。
	</para>
</listitem>
</itemizedlist>
</sect2>


<sect2>
<title>用件</title>

<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>バックアップ</primary></indexterm>
<indexterm><primary>ブートディスク</primary></indexterm>
現在使用しているSamba設定ファイルがあるなら、<emphasis>バックアップを取ること!</emphasis>。
使用中のシステムが既にPAMを使用しているなら、<emphasis>
<filename>/etc/pam.d</filename>ディレクトリの内容をバックアップすること!</emphasis>。
起動ディスクをまだ作成していないのなら<emphasis>今すぐに作ること!</emphasis>。
</para>

<para>
<indexterm><primary>PAMの設定</primary></indexterm>
<indexterm><primary>/etc/pam.d</primary></indexterm>
<indexterm><primary>シングルユーザモード</primary></indexterm>
PAM設定ファイルを間違って修正すると、使用中のマシンにログインするのがほとんど不可能に
なってしまうことがある。このため、うまくいかない時にはマシンをシングルユーザモードで
立ち上げ、<filename>/etc/pam.d</filename>を元の状態に戻せるようにすること。
</para>

<para>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>daemon</primary></indexterm>
Samba-3の最新バージョンには、正常に機能する winbindd daemonが含まれている。ソースコードを
ダウンロードする手順については、 <ulink url="http://samba.org/">Samba Webページ</ulink>か
最寄のSamba ミラーサイトにある説明を参照のこと。
</para>

<para>
<indexterm><primary>ドメインユーザ</primary></indexterm>
<indexterm><primary>共有とファイル</primary></indexterm>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>開発ライブラリ</primary></indexterm>
ドメインユーザがSambaの共有やファイルにアクセスできるようにし、また使用するマシンが
提供するその他のサービスにもアクセスできるようにするには、PAMを使用するマシン上で正しく
設定しなければならない。Winbindモジュールをコンパイルするには、システム上に最低でもPAM
開発ライブラリがインストールされていなければならない。
<ulink url="http://www.kernel.org/pub/linux/libs/pam/">PAMのウェブサイト</ulink>を参照のこと。

To allow domain users the ability to access Samba shares and files, as well as potentially other services
provided by your Samba machine, PAM must be set up properly on your
machine. In order to compile the Winbind modules, you should have at least the PAM development libraries installed
on your system. Please refer to the PAM Web site <ulink url="http://www.kernel.org/pub/linux/libs/pam/"/>.
</para>
</sect2>

<sect2>
<title>Testing Things Out</title>

<para>
<indexterm><primary>smbd</primary></indexterm>
<indexterm><primary>nmbd</primary></indexterm>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>/etc/pam.d</primary></indexterm>
<indexterm><primary>PAM</primary></indexterm>
Before starting, it is probably best to kill off all the Samba-related daemons running on your server.
Kill off all &smbd;, &nmbd;, and &winbindd; processes that may be running. To use PAM,
make sure that you have the standard PAM package that supplies the <filename>/etc/pam.d</filename>
directory structure, including the PAM modules that are used by PAM-aware services, several PAM libraries,
and the <filename>/usr/doc</filename> and <filename>/usr/man</filename> entries for PAM. Winbind is built
better in Samba if the pam-devel package is also installed. This package includes the header files
needed to compile PAM-aware applications.
</para>

<sect3>
<title>Configure <filename>nsswitch.conf</filename> and the Winbind Libraries on Linux and Solaris</title>

<para>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>pam-devel</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>/etc/nsswitch.conf</primary></indexterm>
PAM is a standard component of most current generation UNIX/Linux systems. Unfortunately, few systems install
the <filename>pam-devel</filename> libraries that are needed to build PAM-enabled Samba. Additionally, Samba-3
may auto-install the Winbind files into their correct locations on your system, so before you get too far down
the track, be sure to check if the following configuration is really
necessary. You may only need to configure
<filename>/etc/nsswitch.conf</filename>.
</para>

<para>
The libraries needed to run the &winbindd; daemon through nsswitch need to be copied to their proper locations:
</para>

<para>
<indexterm><primary>libnss_winbind.so</primary></indexterm>
<screen>
&rootprompt;<userinput>cp ../samba/source/nsswitch/libnss_winbind.so /lib</userinput>
</screen>
</para>

<para>
I also found it necessary to make the following symbolic link:
</para>

<para>
&rootprompt; <userinput>ln -s /lib/libnss_winbind.so /lib/libnss_winbind.so.2</userinput>
</para>

<para>And, in the case of Sun Solaris:
<indexterm><primary>nss_winbind.so.1</primary></indexterm>
<screen>
&rootprompt;<userinput>ln -s /usr/lib/libnss_winbind.so /usr/lib/libnss_winbind.so.1</userinput>
&rootprompt;<userinput>ln -s /usr/lib/libnss_winbind.so /usr/lib/nss_winbind.so.1</userinput>
&rootprompt;<userinput>ln -s /usr/lib/libnss_winbind.so /usr/lib/nss_winbind.so.2</userinput>
</screen>
</para>

<para>
<indexterm><primary>/etc/nsswitch.conf</primary></indexterm>
As root, edit <filename>/etc/nsswitch.conf</filename> to allow user and group entries to be visible from the
&winbindd; daemon. My <filename>/etc/nsswitch.conf</filename> file looked like this after editing:
<programlisting>
passwd:     files winbind
shadow:     files
group:      files winbind
</programlisting></para>

<para>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>ldconfig</primary></indexterm>
<indexterm><primary>libnss_winbind</primary></indexterm>
<indexterm><primary>grep</primary></indexterm>
<indexterm><primary>dynamic link loader</primary></indexterm>
The libraries needed by the <command>winbindd</command> daemon will be automatically
entered into the <command>ldconfig</command> cache the next time
your system reboots, but it is faster (and you do not need to reboot) if you do it manually:
<screen>
&rootprompt;<userinput>/sbin/ldconfig -v | grep winbind</userinput>
</screen>
This makes <filename>libnss_winbind</filename> available to winbindd and reports the current
search path that is used by the dynamic link loader. The use of the <command>grep</command>
filters the output of the <command>ldconfig</command> command so that we may see proof that
this library is indeed recognized by the dynamic link loader.
</para>

<para>
<indexterm><primary>dynamic link loader</primary></indexterm>
<indexterm><primary>crle</primary></indexterm>
<indexterm><primary>/usr/local/lib</primary></indexterm>
<indexterm><primary>link loader configuration</primary></indexterm>
<indexterm><primary>object module dependencies</primary></indexterm>
The Sun Solaris dynamic link loader management tool is called <command>crle</command>. The
use of this tool is necessary to instruct the dynamic link loader to search directories that
contain library files that were not supplied as part of the original operating system platform.
The following example shows how to use this tool to add the directory <filename>/usr/local/lib</filename>
to the dynamic link loader's search path:
<screen>
&rootprompt; crle -u -l /usr/lib:/usr/local/lib
</screen>
When executed without arguments, <command>crle</command> reports the current dynamic
link loader configuration. This is demonstrated here:
<screen>
&rootprompt; crle

Configuration file [version 4]: /var/ld/ld.config
  Default Library Path (ELF):   /lib:/usr/lib:/usr/local/lib
  Trusted Directories (ELF):    /lib/secure:/usr/lib/secure  (system default)

Command line:
  crle -c /var/ld/ld.config -l /lib:/usr/lib:/usr/local/lib
</screen>
From this it is apparent that the <filename>/usr/local/lib</filename> directory is included
in the search dynamic link libraries in order to satisfy object module dependencies.
</para>

</sect3>

<sect3>
<title>NSS Winbind on AIX</title>

<para>(This section is only for those running AIX.)</para>

<para>
<indexterm><primary>AIX</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>/usr/lib/security</primary></indexterm>
<indexterm><primary>authentication module API</primary></indexterm>
<indexterm><primary>/usr/lib/security/methods.cfg</primary></indexterm>
<indexterm><primary>PAM module</primary></indexterm>
The Winbind AIX identification module gets built as <filename>libnss_winbind.so</filename> in the
nsswitch directory of the Samba source. This file can be copied to <filename>/usr/lib/security</filename>,
and the AIX naming convention would indicate that it should be named WINBIND. A stanza like the following:
<programlisting>
WINBIND:
        program = /usr/lib/security/WINBIND
        options = authonly
</programlisting>
can then be added to <filename>/usr/lib/security/methods.cfg</filename>. This module only supports
identification, but there have been reports of success using the standard Winbind PAM module for
authentication. Use caution configuring loadable authentication modules, since misconfiguration can make
it impossible to log on to the system.  Information regarding the AIX authentication module API can
be found in the <quote>Kernel Extensions and Device Support Programming Concepts for AIX</quote> document that
describes the <ulink url="http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/aixprggd/kernextc/sec_load_mod.htm">
Loadable Authentication Module Programming Interface</ulink> for AIX. Further information on administering the modules
can be found in the <ulink url="http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/aixbman/baseadmn/iandaadmin.htm">System
Management Guide: Operating System and Devices.</ulink>
</para>
</sect3>

<sect3>
<title>Configure smb.conf</title>

<para>
<indexterm><primary>winbind</primary></indexterm>
<indexterm><primary>man page</primary></indexterm>
<indexterm><primary>winbindd</primary></indexterm>
Several parameters are needed in the &smb.conf; file to control the behavior of &winbindd;. These
are described in more detail in the <citerefentry><refentrytitle>winbindd</refentrytitle>
<manvolnum>8</manvolnum></citerefentry> man page. My &smb.conf; file, as shown in <link
linkend="winbindcfg">the smb.conf for Winbind Setup</link>, was modified to include the necessary entries in the [global] section.
</para>

<example id="winbindcfg">
<title>smb.conf for Winbind Setup</title>
<smbconfblock>
<smbconfsection name="[global]"/>
<smbconfcomment> separate domain and username with '\', like DOMAIN\username</smbconfcomment>
<smbconfoption name="winbind separator">\</smbconfoption>
<smbconfcomment> use uids from 10000 to 20000 for domain users</smbconfcomment>
<smbconfoption name="idmap uid">10000-20000</smbconfoption>
<smbconfcomment> use gids from 10000 to 20000 for domain groups</smbconfcomment>
<smbconfoption name="idmap gid">10000-20000</smbconfoption>
<smbconfcomment> allow enumeration of winbind users and groups</smbconfcomment>
<smbconfoption name="winbind enum users">yes</smbconfoption>
<smbconfoption name="winbind enum groups">yes</smbconfoption>
<smbconfcomment> give winbind users a real shell (only needed if they have telnet access)</smbconfcomment>
<smbconfoption name="template homedir">/home/winnt/%D/%U</smbconfoption>
<smbconfoption name="template shell">/bin/bash</smbconfoption>
</smbconfblock>
</example>

</sect3>


<sect3>
<title>Join the Samba Server to the PDC Domain</title>

<para>
<indexterm><primary>domain security</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>BDC</primary></indexterm>
All machines that will participate in domain security should be members of
the domain. This applies also to the PDC and all BDCs.
</para>

<para>
<indexterm><primary>joining domain</primary></indexterm>
<indexterm><primary>domain join</primary></indexterm>
<indexterm><primary>net</primary><secondary>rpc</secondary><tertiary>join</tertiary></indexterm>
<indexterm><primary>smbd</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>domain controller</primary></indexterm>
<indexterm><primary>MS DCE RPC</primary></indexterm>
<indexterm><primary>DCE RPC</primary></indexterm>
<indexterm><primary>RPC</primary></indexterm>
The process of joining a domain requires the use of the <command>net rpc join</command>
command. This process communicates with the domain controller it will register with
(usually the PDC) via MS DCE RPC. This means, of course, that the <command>smbd</command>
process must be running on the target domain controller. It is therefore necessary to temporarily
start Samba on a PDC so that it can join its own domain.
</para>

<para>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>administrative privileges</primary></indexterm>
<indexterm><primary>Administrator</primary></indexterm>
Enter the following command to make the Samba server join the domain, where <replaceable>PDC</replaceable> is
the name of your PDC and <replaceable>Administrator</replaceable> is a domain user who has administrative
privileges in the domain.
</para>

<note><para>
<indexterm><primary>domain controller</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>tcp ports</primary></indexterm>
<indexterm><primary>udp ports</primary></indexterm>
Before attempting to join a machine to the domain, verify that Samba is running
on the target domain controller (usually PDC) and that it is capable of being reached via ports
137/udp, 135/tcp, 139/tcp, and 445/tcp (if Samba or Windows Server 2Kx).
</para></note>

<para>
<indexterm><primary>net</primary><secondary>rpc</secondary><tertiary>join</tertiary></indexterm>
The use of the <command>net rpc join</command> facility is shown here:
<screen>
&rootprompt;<userinput>/usr/local/samba/bin/net rpc join -S PDC -U Administrator</userinput>
</screen>
The proper response to the command should be <quote>Joined the domain
<replaceable>DOMAIN</replaceable></quote> where <replaceable>DOMAIN</replaceable>
is your domain name.
</para>

</sect3>

<sect3>
<title>Starting and Testing the <command>winbindd</command> Daemon</title>

<para>
<indexterm><primary>startup script</primary></indexterm>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>Winbind services</primary></indexterm>
Eventually, you will want to modify your Samba startup script to automatically invoke the winbindd daemon when
the other parts of Samba start, but it is possible to test out just the Winbind portion first. To start up
Winbind services, enter the following command as root:
<screen>
&rootprompt;<userinput>/usr/local/samba/sbin/winbindd</userinput>
</screen>
Use the appropriate path to the location of the <command>winbindd</command> executable file.
</para>

<note><para>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>/usr/local/samba</primary></indexterm>
The command to start up Winbind services assumes that Samba has been installed in the
<filename>/usr/local/samba</filename> directory tree. You may need to search for the location of Samba files
if this is not the location of <command>winbindd</command> on your system.
</para></note>

<para>
<indexterm><primary>paranoid</primary></indexterm>
<indexterm><primary>daemon running</primary></indexterm>
I'm always paranoid and like to make sure the daemon is really running.
<screen>
&rootprompt;<userinput>ps -ae | grep winbindd</userinput>
</screen>
</para>

<para>
<indexterm><primary>winbindd</primary></indexterm>
This command should produce output like the following if the daemon is running.
<screen>
3025 ?        00:00:00 winbindd
</screen>
</para>

<para>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>wbinfo</primary></indexterm>
Now, for the real test, try to get some information about the users on your PDC:
<screen>
&rootprompt;<userinput>/usr/local/samba/bin/wbinfo -u</userinput>
</screen>
This should echo back a list of users on your Windows users on your PDC. For example, I get the following
response:
<screen>
CEO\Administrator
CEO\burdell
CEO\Guest
CEO\jt-ad
CEO\krbtgt
CEO\TsInternetUser
</screen>
Obviously, I have named my domain <quote>CEO</quote> and my <smbconfoption name="winbind separator"/> is
<quote>\</quote>.
</para>

<para>
<indexterm><primary>wbinfo</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
You can do the same sort of thing to get group information from the PDC:
<screen>
&rootprompt;<userinput>/usr/local/samba/bin/wbinfo -g</userinput>
CEO\Domain Admins
CEO\Domain Users
CEO\Domain Guests
CEO\Domain Computers
CEO\Domain Controllers
CEO\Cert Publishers
CEO\Schema Admins
CEO\Enterprise Admins
CEO\Group Policy Creator Owners
</screen></para>

<para>
<indexterm><primary>getent</primary></indexterm>
<indexterm><primary>PDC</primary></indexterm>
<indexterm><primary>/etc/passwd</primary></indexterm>
<indexterm><primary>UID</primary></indexterm>
<indexterm><primary>GID</primary></indexterm>
<indexterm><primary>home directories</primary></indexterm>
<indexterm><primary>default shells</primary></indexterm>
The function <command>getent</command> can now be used to get unified lists of both local and PDC users and
groups. Try the following command:
<screen>
&rootprompt;<userinput>getent passwd</userinput>
</screen>
You should get a list that looks like your <filename>/etc/passwd</filename>
list followed by the domain users with their new UIDs, GIDs, home
directories, and default shells.
</para>

<para>
The same thing can be done for groups with the command:
<screen>
&rootprompt;<userinput>getent group</userinput>
</screen>
</para>

</sect3>


<sect3>
<title>Fix the init.d Startup Scripts</title>

<sect4>
<title>Linux</title>

<para>
<indexterm><primary>winbindd daemon</primary></indexterm>
<indexterm><primary>smbd</primary></indexterm>
<indexterm><primary>nmbd</primary></indexterm>
<indexterm><primary>/etc/init.d/smb</primary></indexterm>
<indexterm><primary>/etc/init.d/samba</primary></indexterm>
<indexterm><primary>/usr/local/samba/bin</primary></indexterm>
<indexterm><primary></primary></indexterm>
<indexterm><primary></primary></indexterm>
<indexterm><primary></primary></indexterm>
The &winbindd; daemon needs to start up after the &smbd; and &nmbd; daemons are running.  To accomplish this
task, you need to modify the startup scripts of your system.  They are located at
<filename>/etc/init.d/smb</filename> in Red Hat Linux and in <filename>/etc/init.d/samba</filename> in Debian
Linux. Edit your script to add commands to invoke this daemon in the proper sequence. My startup script starts
up &smbd;, &nmbd;, and &winbindd; from the <filename>/usr/local/samba/bin</filename> directory directly. The
<command>start</command> function in the script looks like this:
<programlisting>
start() {
        KIND="SMB"
        echo -n $"Starting $KIND services: "
        daemon /usr/local/samba/bin/smbd $SMBDOPTIONS
        RETVAL=$?
        echo
        KIND="NMB"
        echo -n $"Starting $KIND services: "
        daemon /usr/local/samba/bin/nmbd $NMBDOPTIONS
        RETVAL2=$?
        echo
        KIND="Winbind"
        echo -n $"Starting $KIND services: "
        daemon /usr/local/samba/sbin/winbindd
        RETVAL3=$?
        echo
        [ $RETVAL -eq 0 -a $RETVAL2 -eq 0 -a $RETVAL3 -eq 0 ] &amp;&amp; \
		touch /var/lock/subsys/smb || RETVAL=1
        return $RETVAL
}
</programlisting></para>

<para>If you would like to run winbindd in dual daemon mode, replace the line:
<programlisting>
        daemon /usr/local/samba/sbin/winbindd
</programlisting>

in the example above with:

<programlisting>
        daemon /usr/local/samba/sbin/winbindd -D
</programlisting>.
</para>

<para>
The <command>stop</command> function has a corresponding entry to shut down the services and looks like this:
</para>

<para><programlisting>
stop() {
        KIND="SMB"
        echo -n $"Shutting down $KIND services: "
        killproc smbd
        RETVAL=$?
        echo
        KIND="NMB"
        echo -n $"Shutting down $KIND services: "
        killproc nmbd
        RETVAL2=$?
        echo
        KIND="Winbind"
        echo -n $"Shutting down $KIND services: "
        killproc winbindd
        RETVAL3=$?
        [ $RETVAL -eq 0 -a $RETVAL2 -eq 0 -a $RETVAL3 -eq 0 ] &amp;&amp; \
		 rm -f /var/lock/subsys/smb
        echo ""
        return $RETVAL
}
</programlisting></para>
</sect4>

<sect4>
<title>Solaris</title>

<para>
Winbind does not work on Solaris 9; see <link linkend="winbind-solaris9">Winbind on Solaris 9 section</link>
for details.
</para>

<para>
<indexterm><primary>Solaris 9</primary></indexterm>
<indexterm><primary>/etc/init.d/samba.server</primary></indexterm>
<indexterm><primary>/usr/local/samba/bin</primary></indexterm>
<indexterm><primary>smbd</primary></indexterm>
<indexterm><primary>nmbd</primary></indexterm>
<indexterm><primary>winbindd</primary></indexterm>
On Solaris, you need to modify the <filename>/etc/init.d/samba.server</filename> startup script. It
usually only starts smbd and nmbd but should now start winbindd, too. If you have Samba installed in
<filename>/usr/local/samba/bin</filename>, the file could contains something like this:
</para>

<para>
	<programlisting>
	##
	## samba.server
	##

	if [ ! -d /usr/bin ]
	then                    # /usr not mounted
		exit
	fi

	killproc() {            # kill the named process(es)
		pid=`/usr/bin/ps -e |
		     /usr/bin/grep -w $1 |
		     /usr/bin/sed -e 's/^  *//' -e 's/ .*//'`
		[ "$pid" != "" ] &amp;&amp; kill $pid
	}

	# Start/stop processes required for Samba server

	case "$1" in

	'start')
	#
	# Edit these lines to suit your installation (paths, workgroup, host)
	#
	echo Starting SMBD
	   /usr/local/samba/bin/smbd -D -s \
		/usr/local/samba/smb.conf

	echo Starting NMBD
	   /usr/local/samba/bin/nmbd -D -l \
		/usr/local/samba/var/log -s /usr/local/samba/smb.conf

	echo Starting Winbind Daemon
	   /usr/local/samba/sbin/winbindd
	   ;;

	'stop')
	   killproc nmbd
	   killproc smbd
	   killproc winbindd
	   ;;

	*)
	   echo "Usage: /etc/init.d/samba.server { start | stop }"
	   ;;
	esac
</programlisting></para>

<para>
Again, if you would like to run Samba in dual daemon mode, replace:
<programlisting>
/usr/local/samba/sbin/winbindd
</programlisting>
in the script above with:
<programlisting>
/usr/local/samba/sbin/winbindd -D
</programlisting>
</para>

</sect4>

<sect4>
<title>Restarting</title>
<para>
<indexterm><primary>daemons</primary></indexterm>
<indexterm><primary>local user</primary></indexterm>
If you restart the &smbd;, &nmbd;, and &winbindd; daemons at this point, you
should be able to connect to the Samba server as a domain member just as
if you were a local user.
</para>
</sect4>
</sect3>

<sect3>
<title>Configure Winbind and PAM</title>

<para>
<indexterm><primary>winbindd</primary></indexterm>
<indexterm><primary>authentication</primary></indexterm>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>/etc/pam.d</primary></indexterm>
If you have made it this far, you know that <command>winbindd</command> and Samba are working together. If you
want to use Winbind to provide authentication for other services, keep reading. The PAM configuration files
need to be altered in this step. (Did you remember to make backups of your original
<filename>/etc/pam.d</filename> files? If not, do it now.)
</para>

<para>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>../source/nsswitch</primary></indexterm>
<indexterm><primary>pam_winbind.so</primary></indexterm>
<indexterm><primary>/lib/security</primary></indexterm>
<indexterm><primary>Solaris</primary></indexterm>
<indexterm><primary>/usr/lib/security</primary></indexterm>
You will need a PAM module to use winbindd with these other services. This module will be compiled in the
<filename>../source/nsswitch</filename> directory by invoking the command:
<screen>
&rootprompt;<userinput>make nsswitch/pam_winbind.so</userinput>
</screen>
from the <filename>../source</filename> directory. The <filename>pam_winbind.so</filename> file should be
copied to the location of your other PAM security modules. On my Red Hat system, this was the
<filename>/lib/security</filename> directory. On Solaris, the PAM security modules reside in
<filename>/usr/lib/security</filename>.
<screen>
&rootprompt;<userinput>cp ../samba/source/nsswitch/pam_winbind.so /lib/security</userinput>
</screen>
</para>

<sect4>
<title>Linux/FreeBSD-Specific PAM Configuration</title>

<para>
<indexterm><primary>/etc/pam.d/samba</primary></indexterm>
The <filename>/etc/pam.d/samba</filename> file does not need to be changed. I just left this file as it was:
<programlisting>
auth    required  /lib/security/pam_stack.so service=system-auth
account required  /lib/security/pam_stack.so service=system-auth
</programlisting></para>

<para>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>authentication service</primary></indexterm>
<indexterm><primary>login</primary></indexterm>
<indexterm><primary>console</primary></indexterm>
<indexterm><primary>telnet logins</primary></indexterm>
<indexterm><primary>ftp service</primary></indexterm>
<indexterm><primary>/etc/xinetd.d</primary></indexterm>
<indexterm><primary>/etc/inetd.conf</primary></indexterm>
<indexterm><primary>/etc/xinetd.d/telnet</primary></indexterm>
The other services that I modified to allow the use of Winbind as an authentication service were the normal
login on the console (or a terminal session), telnet logins, and ftp service. In order to enable these
services, you may first need to change the entries in <filename>/etc/xinetd.d</filename> (or
<filename>/etc/inetd.conf</filename>).  Red Hat Linux 7.1 and later uses the new xinetd.d structure, in this
case you need to change the lines in <filename>/etc/xinetd.d/telnet</filename> and
<filename>/etc/xinetd.d/wu-ftp</filename> from:
<programlisting>
	enable = no
</programlisting>
to
<programlisting>
	enable = yes
</programlisting></para>

<para>
<indexterm><primary>ftp services</primary></indexterm>
<indexterm><primary>home directory template</primary></indexterm>
<indexterm><primary>domain users</primary></indexterm>
For ftp services to work properly, you will also need to either have individual directories for the domain
users already present on the server or change the home directory template to a general directory for all
domain users. These can be easily set using the &smb.conf; global entry <smbconfoption name="template
homedir"/>.
</para>

<note><para>
<indexterm><primary>pam_mkhomedir</primary></indexterm>
The directory in <smbconfoption name="template homedir"/> is not created automatically! Use pam_mkhomedir or
pre-create the directories of users to make sure users can log in on UNIX with their own home directory.
</para></note>

<para>
<indexterm><primary>/etc/pam.d/ftp</primary></indexterm>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>ftp access</primary></indexterm>
The <filename>/etc/pam.d/ftp</filename> file can be changed to allow Winbind ftp access in a manner similar to
the samba file. My <filename>/etc/pam.d/ftp</filename> file was changed to look like this:
<programlisting>
auth       required     /lib/security/pam_listfile.so item=user sense=deny \
	 file=/etc/ftpusers onerr=succeed
auth       sufficient   /lib/security/pam_winbind.so
auth       required     /lib/security/pam_stack.so service=system-auth
auth       required     /lib/security/pam_shells.so
account    sufficient   /lib/security/pam_winbind.so
account    required     /lib/security/pam_stack.so service=system-auth
session    required     /lib/security/pam_stack.so service=system-auth
</programlisting></para>

<para>
<indexterm><primary>/etc/pam.d/login</primary></indexterm>
The <filename>/etc/pam.d/login</filename> file can be changed in nearly the same way. It now looks like this:
<programlisting>
auth       required     /lib/security/pam_securetty.so
auth       sufficient   /lib/security/pam_winbind.so
auth       sufficient   /lib/security/pam_unix.so use_first_pass
auth       required     /lib/security/pam_stack.so service=system-auth
auth       required     /lib/security/pam_nologin.so
account    sufficient   /lib/security/pam_winbind.so
account    required     /lib/security/pam_stack.so service=system-auth
password   required     /lib/security/pam_stack.so service=system-auth
session    required     /lib/security/pam_stack.so service=system-auth
session    optional     /lib/security/pam_console.so
</programlisting>
<indexterm><primary>pam_winbind.so</primary></indexterm>
<indexterm><primary>pam_securetty.so</primary></indexterm>
<indexterm><primary>pam_unix.so</primary></indexterm>
In this case, I added the <programlisting>auth sufficient /lib/security/pam_winbind.so</programlisting> lines
as before, but also added the <programlisting>required pam_securetty.so</programlisting> above it to disallow
root logins over the network. I also added a <programlisting>sufficient /lib/security/pam_unix.so
use_first_pass</programlisting> line after the <command>winbind.so</command> line to get rid of annoying
double prompts for passwords.
</para>

</sect4>

<sect4>
<title>Solaris-Specific Configuration</title>

<para>
<indexterm><primary>/etc/pam.conf</primary></indexterm>
<indexterm><primary></primary></indexterm>
The <filename>/etc/pam.conf</filename> needs to be changed. I changed this file so my Domain
users can log on both locally as well as with telnet. The following are the changes
that I made. You can customize the <filename>pam.conf</filename> file as per your requirements, but
be sure of those changes because in the worst case it will leave your system
nearly impossible to boot.
<programlisting>
#
#ident "@(#)pam.conf 1.14 99/09/16 SMI"
#
# Copyright (c) 1996-1999, Sun Microsystems, Inc.
# All Rights Reserved.
#
# PAM configuration
#
# Authentication management
#
login   auth required   /usr/lib/security/pam_winbind.so
login auth required  /usr/lib/security/$ISA/pam_unix.so.1 try_first_pass
login auth required  /usr/lib/security/$ISA/pam_dial_auth.so.1 try_first_pass
#
rlogin  auth sufficient /usr/lib/security/pam_winbind.so
rlogin  auth sufficient /usr/lib/security/$ISA/pam_rhosts_auth.so.1
rlogin auth required  /usr/lib/security/$ISA/pam_unix.so.1 try_first_pass
#
dtlogin auth sufficient /usr/lib/security/pam_winbind.so
dtlogin auth required  /usr/lib/security/$ISA/pam_unix.so.1 try_first_pass
#
rsh auth required /usr/lib/security/$ISA/pam_rhosts_auth.so.1
other   auth sufficient /usr/lib/security/pam_winbind.so
other auth required /usr/lib/security/$ISA/pam_unix.so.1 try_first_pass
#
# Account management
#
login   account sufficient      /usr/lib/security/pam_winbind.so
login account requisite /usr/lib/security/$ISA/pam_roles.so.1
login account required /usr/lib/security/$ISA/pam_unix.so.1
#
dtlogin account sufficient      /usr/lib/security/pam_winbind.so
dtlogin account requisite /usr/lib/security/$ISA/pam_roles.so.1
dtlogin account required /usr/lib/security/$ISA/pam_unix.so.1
#
other   account sufficient      /usr/lib/security/pam_winbind.so
other account requisite /usr/lib/security/$ISA/pam_roles.so.1
other account required /usr/lib/security/$ISA/pam_unix.so.1
#
# Session management
#
other session required /usr/lib/security/$ISA/pam_unix.so.1
#
# Password management
#
#other   password sufficient     /usr/lib/security/pam_winbind.so
other password required /usr/lib/security/$ISA/pam_unix.so.1
dtsession auth required /usr/lib/security/$ISA/pam_unix.so.1
#
# Support for Kerberos V5 authentication (uncomment to use Kerberos)
#
#rlogin auth optional /usr/lib/security/$ISA/pam_krb5.so.1 try_first_pass
#login auth optional /usr/lib/security/$ISA/pam_krb5.so.1 try_first_pass
#dtlogin auth optional /usr/lib/security/$ISA/pam_krb5.so.1 try_first_pass
#other auth optional /usr/lib/security/$ISA/pam_krb5.so.1 try_first_pass
#dtlogin account optional /usr/lib/security/$ISA/pam_krb5.so.1
#other account optional /usr/lib/security/$ISA/pam_krb5.so.1
#other session optional /usr/lib/security/$ISA/pam_krb5.so.1
#other password optional /usr/lib/security/$ISA/pam_krb5.so.1 try_first_pass
</programlisting></para>

<para>
<indexterm><primary>winbind.so</primary></indexterm>
I also added a <parameter>try_first_pass</parameter> line after the <filename>winbind.so</filename>
line to get rid of annoying double prompts for passwords.
</para>

<para>
Now restart your Samba and try connecting through your application that you
configured in the pam.conf.
</para>

</sect4>

</sect3>

</sect2>

</sect1>

<sect1>
<title>Conclusion</title>

<para>
<indexterm><primary>Winbind</primary></indexterm>
<indexterm><primary>NSS</primary></indexterm>
<indexterm><primary>PAM</primary></indexterm>
<indexterm><primary>RPC calls</primary></indexterm>
<indexterm><primary>domain users</primary></indexterm>
The Winbind system, through the use of the NSS, PAMs, and appropriate Microsoft RPC calls, have allowed us to
provide seamless integration of Microsoft Windows NT domain users on a UNIX system. The result is a great
reduction in the administrative cost of running a mixed UNIX and NT network.
</para>

</sect1>

<sect1>
<title>Common Errors</title>

	<para>
	Winbind has a number of limitations in its current released version that we hope to overcome in future releases:
	</para>

	<itemizedlist>
		<listitem><para>
		Winbind is currently only available for the Linux, Solaris, AIX, and IRIX operating systems, although
		ports to other operating systems are certainly possible. For such ports to be feasible, we require the C
		library of the target operating system to support the NSS and PAM systems. This is becoming more common as NSS
		and PAM gain support among UNIX vendors.
		</para></listitem>

		<listitem><para>
		The mappings of Windows NT RIDs to UNIX IDs is not made algorithmically and depends on the order in
		which unmapped users or groups are seen by Winbind. It may be difficult to recover the mappings of RID to UNIX
		ID if the file containing this information is corrupted or destroyed.
		</para></listitem>

		<listitem><para>
		Currently the Winbind PAM module does not take into account possible workstation and logon time
		restrictions that may be set for Windows NT users; this is instead up to the PDC to enforce.
		</para></listitem>
	</itemizedlist>

	<sect2>
	<title>NSCD Problem Warning</title>

	<warning><para>
	Do not under any circumstances run <command>nscd</command> on any system
	on which <command>winbindd</command> is running.
	</para></warning>

	<para>
	If <command>nscd</command> is running on the UNIX/Linux system, then
	even though NSSWITCH is correctly configured, it will not be possible to resolve
	domain users and groups for file and directory controls.
	</para>

	</sect2>

	<sect2>
	<title>Winbind Is Not Resolving Users and Groups</title>

	<para><quote>
	My &smb.conf; file is correctly configured. I have specified <smbconfoption name="idmap uid">12000</smbconfoption>,
	and <smbconfoption name="idmap gid">3000-3500</smbconfoption> and <command>winbind</command> is running.
	When I do the following, it all works fine.
	</quote></para>

<para><screen>
&rootprompt;<userinput>wbinfo -u</userinput>
MIDEARTH\maryo
MIDEARTH\jackb
MIDEARTH\ameds
...
MIDEARTH\root

&rootprompt;<userinput>wbinfo -g</userinput>
MIDEARTH\Domain Users
MIDEARTH\Domain Admins
MIDEARTH\Domain Guests
...
MIDEARTH\Accounts

&rootprompt;<userinput>getent passwd</userinput>
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/bin/bash
...
maryo:x:15000:15003:Mary Orville:/home/MIDEARTH/maryo:/bin/false
</screen></para>

<para><quote>
But the following command just fails:
</quote>
<screen>
&rootprompt;<userinput>chown maryo a_file</userinput>
chown: `maryo': invalid user
</screen>
<quote>
This is driving me nuts! What can be wrong?
</quote></para>

<para>
Same problem as the one above.
Your system is likely running <command>nscd</command>, the name service
caching daemon. Shut it down, do not restart it! You will find your problem resolved.
Alternately, fix the operation of nscd to resolve the problem.
</para>

</sect2>
</sect1>

</chapter>
