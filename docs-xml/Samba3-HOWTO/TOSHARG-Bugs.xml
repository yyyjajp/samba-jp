<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="bugreport">

<chapterinfo>
	&author.jht;
	&author.jelmer;
	&author.tridge;
	<pubdate> 27 June 1997 </pubdate>
</chapterinfo>

<title>バグの報告</title>

<sect1>
<title>概要</title>

<para>
<indexterm><primary>Bugzilla</primary></indexterm>
<indexterm><primary>バグの報告</primary></indexterm>
Sambaの<ulink url="https://bugzilla.samba.org/">Bugzilla</ulink>機能を使って
バグを報告し、また、報告を投稿する前に、この章を読んでほしい。また、
もしも、リリース間での変更があるかと、同様にある時点でバグ報告機能を
変更したかもしれないことを調べてほしい。
</para>

<para>
自分自身で出来るだけバグを追い詰めてほしい。Sambaは、ボランティアで時間、技術、労力を
提供している自主的なグループによって保守されている。問い合わせに対応しきれないメールを
受け取っているので、早く修正できる形で、<quote>開発者にわかりやすい</quote>バグ報告を
送ってもらえると、返事とバグ修正の機会が大きくなる。
</para>

<para>
<indexterm><primary>comp.protocols.smb</primary></indexterm>
<indexterm><primary>newsgroup</primary></indexterm>
<indexterm><primary>設定の問題</primary></indexterm>
もしも、comp.protocols.smbニュースグループか、メーリングリストに投稿した
場合、それを開発者が読むと思ってはいけない。もしも、問題がバグではなくて、
設定の問題だと推測したならば、手助けできる人がたくさんいるSambaメーリング
リストに送った方がよい。
</para>

<para>
<ulink noescape="1" url="http://samba.org/samba/">http://samba.org/samba/</ulink>の、
Samba Webページ上で便利にアクセスできる、最近のメーリングリストアーカイブを見る事を
好むかもしれない。
</para>

</sect1>

<sect1>
<title>一般的な情報</title>

<para>
バグレポートを投稿する前に、エラーに対する設定を確認する。設定を間違えていると
いう明確なメッセージをログファイルの中でサポートする。正しい文法になっているか、
設定ファイルをtestparmでチェックする。
</para>

<para>
<link linkend="diagnosis">Sambaチェックリスト</link>を見てみたか?これはとても
重要である。
</para>

<para>
もしも、バグレポートの中にログファイルを含めるならば、その時点でクライアント上で
何をしたかということを正確に、その結果が何であるかを正確に注釈を付けること。
</para>

</sect1>

<sect1 id="dbglvl">
<title>デバッグレベル</title>

<para>
もしも、バグが、サーバとしてSambaの正しくない動作を何かしているならば
(例えばファイルのオープンを断るなど)、ログファイルがとても便利に使えるだろう。
現象にもよるが、ログレベル3から10の間が、適切に問題を表示するかもしれない。
より大きなレベルはより詳細な結果が得られるが、とてもたくさんのディスクを
消費する。
</para>

<para>
<indexterm><primary>debug level</primary></indexterm>
<indexterm><primary>log level</primary></indexterm>
debug levelを設定するには、&smb.conf;中で<smbconfoption name="log level"/>を指定する。
また、特定のマシンだけログレベルを大きくし、各マシン毎に分離すると便利である。
これを行うには、&smb.conf;中に以下の行を追加する:
</para>

<smbconfblock>
<smbconfoption name="log level">10</smbconfoption>
<smbconfoption name="log file">/usr/local/samba/lib/log.%m</smbconfoption>
<smbconfoption name="include">/usr/local/samba/lib/smb.conf.%m</smbconfoption>
</smbconfblock>

<para>
かつ、希望するコマンドを含む&smb.conf;を、新たに
<filename>/usr/local/samba/lib/smb.conf.<replaceable>machine</replaceable>として
作成する。例えば、<smbconfoption name="log level"/>は便利に使えるだろう。
これはまた、異なったセキュリティシステム、プロトコルレベルなどを1つのマシン上で
体験することもできる。
</para>

<para>
&smb.conf;のエントリ<smbconfoption name="log level"/>は、古いバージョンのSambaで
使われていたパラメータ<smbconfoption name="debuglevel"/>と同義語であり、
&smb.conf;ファイルの下位互換性のためにそのまま残っている。
</para>

<para>
<smbconfoption name="log level"/>の値を大きくすると、きわめて大量のデバッグ情報を
記録することになる。多くのデバッグ作業において、この値を<constant>3</constant>より
大きくする必要はないだろう。値を<constant>10</constant>にすると、ほとんどすべての
バグが記録されるが、大きなログデータ領域を準備する必要がある。
</para>

	<sect2>
	<title>デバッグ固有の操作</title>

	<para>
<indexterm><primary>debugging</primary></indexterm>
<indexterm><primary>logging</primary></indexterm>
<indexterm><primary>functional components</primary></indexterm>
<indexterm><primary>cluttering</primary></indexterm>
	Samba-3.x permits debugging (logging) of specific functional components without unnecessarily
	cluttering the log files with detailed logs for all operations. An example configuration to 
	achieve this is shown in:
	</para>

<para>
<smbconfblock>
<smbconfoption name="log level">0 tdb:3 passdb:5 auth:4 vfs:2</smbconfoption>
<smbconfoption name="max log size">0</smbconfoption>
<smbconfoption name="log file">/var/log/samba/%U.%m.log</smbconfoption>
</smbconfblock>
</para>

	<para>
	This will cause the level of detail to be expanded to the debug class (log level) passed to
	each functional area per the value shown above. The first value passed to the <parameter>log level</parameter>
	of <constant>0</constant> means turn off all unnecessary debugging except the debug classes set for
	the functional areas as specified. The table shown in <link linkend="dbgclass">Debuggable Functions</link>
	may be used to attain very precise analysis of each SMB operation Samba is conducting.
	</para>

	<table frame="all" id="dbgclass">
		<title>Debuggable Functions</title>
	<tgroup cols="2" align="center">
		<thead>
		<row><entry>Function Name</entry><entry>Function Name</entry></row>
		</thead>
		<tbody>
		<row><entry>all</entry><entry>passdb</entry></row>
		<row><entry>tdb</entry><entry>sam</entry></row>
		<row><entry>printdrivers</entry><entry>auth</entry></row>
		<row><entry>lanman</entry><entry>winbind</entry></row>
		<row><entry>smb</entry><entry>vfs</entry></row>
		<row><entry>rpc_parse</entry><entry>idmap</entry></row>
		<row><entry>rpc_srv</entry><entry>quota</entry></row>
		<row><entry>rpc_cli</entry><entry>acls</entry></row>
		</tbody>
	</tgroup>
	</table>

	</sect2>

</sect1>

<sect1>
<title>Internal Errors</title>

<para>
If you get the message <quote><errorname>INTERNAL ERROR</errorname></quote> in your log files, 
it means that Samba got an unexpected signal while running. It is probably a
segmentation fault and almost certainly means a bug in Samba (unless
you have faulty hardware or system software).
</para>

<para>
If the message came from smbd, it will probably be accompanied by
a message that details the last SMB message received by smbd. This
information is often useful in tracking down the problem, so please
include it in your bug report.
</para>

<para>
You should also detail how to reproduce the problem, if
possible. Please make this reasonably detailed.
</para>


<para>
<indexterm><primary>core files</primary></indexterm>
You may also find that a core file appeared in a <filename>corefiles</filename>
subdirectory of the directory where you keep your Samba log
files. This file is the most useful tool for tracking down the bug. To
use it, you do this:
<indexterm><primary>gdb</primary></indexterm>
<indexterm><primary>debug</primary></indexterm>
<screen>
&prompt;<userinput>gdb smbd core</userinput>
</screen>
</para>

<para>
<indexterm><primary>dbx</primary></indexterm>
<indexterm><primary>stack trace</primary></indexterm>
adding appropriate paths to smbd and core so gdb can find them. If you
do not have gdb, try <userinput>dbx</userinput>. Then within the debugger,
use the command <command>where</command> to give a stack trace of where the
problem occurred. Include this in your report.
</para>

<para>
<indexterm><primary>disass</primary></indexterm>
If you know any assembly language, do a <command>disass</command> of the routine
where the problem occurred (if it's in a library routine, then
disassemble the routine that called it) and try to work out exactly
where the problem is by looking at the surrounding code. Even if you
do not know assembly, including this information in the bug report can be
useful. 
</para>
</sect1>

<sect1>
<title>Attaching to a Running Process</title>

<para>
<indexterm><primary>PID</primary></indexterm>
<indexterm><primary>gdb</primary></indexterm>
<indexterm><primary>smbstatus</primary></indexterm>
Unfortunately, some UNIXes (in particular some recent Linux kernels)
refuse to dump a core file if the task has changed UID (which smbd
does often). To debug with this sort of system, you could try to attach
to the running process using
<userinput>gdb smbd <replaceable>PID</replaceable></userinput>, where you get
<replaceable>PID</replaceable> from <application>smbstatus</application>.
Then use <command>c</command> to continue and try to cause the core dump
using the client. The debugger should catch the fault and tell you
where it occurred.
</para>

<para>
Sometimes it is necessary to build Samba binary files that have debugging
symbols so as to make it possible to capture enough information from a crashed
operation to permit the Samba Team to fix the problem.
</para>

<para>
Compile with <constant>-g</constant> to ensure you have symbols in place. 
Add the following line to the &smb.conf; file global section:
<screen>
panic action = "/bin/sleep 90000"
</screen>
to catch any panics. If <command>smbd</command> seems to be frozen, look for any sleep
processes. If it is not, and appears to be spinning, find the PID
of the spinning process and type:
<screen>
&rootprompt; gdb /usr/local/samba/sbin/smbd
</screen>
<indexterm><primary>spinning process</primary></indexterm>
then <quote>attach `pid'</quote> (of the spinning process), then type <quote>bt</quote> to
get a backtrace to see where the smbd is in the call path.
</para>

</sect1>

<sect1>
<title>Patches</title>


<para>
<indexterm><primary>diff</primary></indexterm>
<indexterm><primary>patch</primary></indexterm>
The best sort of bug report is one that includes a fix! If you send us
patches, please use <userinput>diff -u</userinput> format if your version of 
diff supports it; otherwise, use <userinput>diff -c4</userinput>. Make sure 
you do the diff against a clean version of the source and let me know 
exactly what version you used. 
</para>

</sect1>
</chapter>
