<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="pwencrypt">


<chapterinfo>
	<author>
		<firstname>Jeremy</firstname><surname>Allison</surname>
		<affiliation>
			<orgname>Samba Team</orgname>
			<address>
				<email>samba@samba.org</email>
			</address>
		</affiliation>
	</author>

	<pubdate>19 Apr 1999</pubdate>
</chapterinfo>
	
<title>LanMan と NT Password の暗号化</title>

<sect1>
	<title>初めに</title>
	
	<para>Samba用の、LanManager と Windows NT互換のパスワード暗号化は、
	  LanManager または Windows NT サーバと正確に同じ方法で、ユーザの接続を
	  検証することが出来るようになっている。</para>

	<para>この文書は、どのようにSMB パスワードの暗号化アルゴリズムが動作し、
	  それを使うことを選択する場合に、何が問題化について記述している。この文書を
	  特に、セキュリティと"PROS and CONS"節を注意深く読むべきである。</para>
	
</sect1>

<sect1>
	<title>どのようにして動作するか?</title>

	<para>LanManagerの暗号化はUNIパスワードの暗号化と若干似ている。サーバは、
	  ユーザのパスワードをハッシュ化した値を含むファイルを使う。これは、ユーザからの
	  平文パスワートを得て、それを大文字化し、14文字で打ち切るか、NULL文字を14文字に
	  なるまで埋めることのどちらかを行って作成する。この14バイトの値は、'特別な'
	  8バイトの値に暗号化されるため、2つの56ビットDESキーとして使われ、サーバと
	  クライアントによって保存される16バイトの値に整形される。これは、
	  "ハッシュ化されたパスワード"として知られる。</para>
	
	<para>Windows NTの暗号化は非常に高品質のメカニズムで、ユニコード版の、
	  ユーザのパスワード上で、MD4ハッシュを行うことから成り立っている。これはまた、
	  可逆変換不可能な16バイトハッシュ値である。</para>

	<para>クライアント(LanManager, Windows for WorkGroups, Windows
          95 か Windows NT)がSambaドライブ(かSambaリソース)をマウントしようとした時、
	  最初に接続を要求し、クライアントとサーバが使うプロトコルを調整する。
	  この要求のリプライ中で、Sambaサーバは8バイトのランダム値を生成し添付する。
	  これは、"チャレンジ"と呼ばれ、リプライが返ってくることに備えてSambaサーバ中に
	  保存される。チャレンジはすべてのクライアント接続毎に異なる。</para>

	<para>クライアントは次にハッシュ化されたパスワード(上記で説明されている
	  16バイト値)を使い、5つのNULL文字を追加し、3つの56ビットDESキーとし、
	  それは、おのおのチャレンジの8バイト値を暗号化するのに使われ、"レスポンス"
	  と呼ばれる24バイトの値に整形する。</para>

	<para>SMB呼び出しSMBsessionsetupX(ユーザレベルセキュリティが選択された場合)中か、
	  STBtconX呼び出し(共有レベルセキュリティが選択された場合)中で、24バイトの
	  レスポンスはクライアントによってSambaサーバに戻される。Windows NTプロトコル
	  レベル用に、上記の計算が、ユーザのパスワードのハッシュ両方ととレスポンス両方に
	  対して行われ、2つの24バイト値がSMB呼び出しに対して戻される。</para>

	<para>Sambaサーバは次に上記の計算を、サーバ内に保存されている16バイトの
	  ハッシュ化されたパスワード(後述する<filename>smbpasswd</filename>から読んで)、
	  ネゴシエートプロトコルの返答から得たチャレンジ値を使って再度行う。それは
	  次に、計算した24バイトの値がクライアントから返されたものと一致するかを
	  確認する。</para>

	<para>もしも、それらの値が性格に一致するならば、クライアントが正しいパスワード
	  (か、16バイトのハッシュ化された値 - 以下のセキュリティに関する注意を参照)
	  を使っていて、その結果アクセスは許可される。もしもそうでない場合、
	  クライアントは正しいパスワードを使っておらず、アクセスは拒否される。</para>

	<para>Sambaサーバはユーザの平文パスワードを受け取ったり、格納することは
	  決してないことに注意。それに由来する16バイトのハッシュ値のみである。また、
	  平文パスワードまたは16バイトのハッシュ値はネットワーク上を決して流れない。
	  そのため、セキュリティは向上する。</para>
</sect1>

<sect1>
	<title>smbpasswd ファイル</title>
	<anchor id="SMBPASSWDFILEFORMAT"/>
	<para>In order for Samba to participate in the above protocol 
	it must be able to look up the 16 byte hashed values given a user name.
	Unfortunately, as the UNIX password value is also a one way hash
	function (ie. it is impossible to retrieve the cleartext of the user's
	password given the UNIX hash of it), a separate password file
	containing this 16 byte value must be kept. To minimise problems with
	these two password files, getting out of sync, the UNIX <filename>
	/etc/passwd</filename> and the <filename>smbpasswd</filename> file, 
	a utility, <command>mksmbpasswd.sh</command>, is provided to generate
	a smbpasswd file from a UNIX <filename>/etc/passwd</filename> file.
	</para>


	<para>To generate the smbpasswd file from your <filename>/etc/passwd
	</filename> file use the following command:</para>
	
	<para><prompt>$ </prompt><userinput>cat /etc/passwd | mksmbpasswd.sh
	&gt; /usr/local/samba/private/smbpasswd</userinput></para>
	
	<para>If you are running on a system that uses NIS, use</para>

	<para><prompt>$ </prompt><userinput>ypcat passwd | mksmbpasswd.sh
	&gt; /usr/local/samba/private/smbpasswd</userinput></para>
	
	<para>The <command>mksmbpasswd.sh</command> program is found in 
	the Samba source directory. By default, the smbpasswd file is 
	stored in :</para>

	<para><filename>/usr/local/samba/private/smbpasswd</filename></para>

	<para>The owner of the <filename>/usr/local/samba/private/</filename> 
	directory should be set to root, and the permissions on it should 
	be set to 0500 (<command>chmod 500 /usr/local/samba/private</command>).
	</para>

	<para>Likewise, the smbpasswd file inside the private directory should 
	be owned by root and the permissions on is should be set to 0600
	(<command>chmod 600 smbpasswd</command>).</para>


	<para>The format of the smbpasswd file is (The line has been 
	wrapped here. It should appear as one entry per line in 
	your smbpasswd file.)</para>
	
	<para><programlisting>
username:uid:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:
	[Account type]:LCT-&lt;last-change-time&gt;:Long name
	</programlisting></para>
	
	<para>Although only the <replaceable>username</replaceable>, 
	<replaceable>uid</replaceable>, <replaceable>
	XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</replaceable>,
	[<replaceable>Account type</replaceable>] and <replaceable>
	last-change-time</replaceable> sections are significant 
	and are looked at in the Samba code.</para>

	<para>It is <emphasis>VITALLY</emphasis> important that there by 32 
	'X' characters between the two ':' characters in the XXX sections - 
	the smbpasswd and Samba code will fail to validate any entries that 
	do not have 32 characters  between ':' characters. The first XXX 
	section is for the Lanman password hash, the second is for the 
	Windows NT version.</para>

	<para>When the password file is created all users have password entries
	consisting of 32 'X' characters. By default this disallows any access
	as this user. When a user has a password set, the 'X' characters change
	to 32 ascii hexadecimal digits (0-9, A-F). These are an ascii
	representation of the 16 byte hashed value of a user's password.</para>

	<para>To set a user to have no password (not recommended), edit the file
	using vi, and replace the first 11 characters with the ascii text
	<constant>"NO PASSWORD"</constant> (minus the quotes).</para>

	<para>For example, to clear the password for user bob, his smbpasswd file 
	entry would look like :</para>

	<para><programlisting>
bob:100:NO PASSWORDXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:
	[U          ]:LCT-00000000:Bob's full name:/bobhome:/bobshell
	</programlisting></para>
	
	<para>If you are allowing users to use the smbpasswd command to set 
	their own passwords, you may want to give users NO PASSWORD initially 
	so they do not have to enter a previous password when changing to their 
	new password (not recommended). In order for you to allow this the
	<command>smbpasswd</command> program must be able to connect to the 
	<command>smbd</command> daemon as that user with no password. Enable this 
	by adding the line :</para>

	<para><command>null passwords = yes</command></para>
	
	<para>to the [global] section of the smb.conf file (this is why 
	the above scenario is not recommended). Preferably, allocate your
	users a default password to begin with, so you do not have
	to enable this on your server.</para>

	<para><emphasis>Note : </emphasis>This file should be protected very 
	carefully. Anyone with access to this file can (with enough knowledge of 
	the protocols) gain access to your SMB server. The file is thus more 
	sensitive than a normal unix <filename>/etc/passwd</filename> file.</para>
</sect1>

</chapter>
