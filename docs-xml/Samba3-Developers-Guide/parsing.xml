<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="parsing">
<chapterinfo>
	<author>
		<firstname>Chris</firstname><surname>Hertel</surname>
	</author>
	<pubdate>November 1997</pubdate>
</chapterinfo>

<title>smb.confファイル</title>

<sect1>
<title>Lexical Analysis</title>

<para>
基本的に、ファイルは行単位で処理される。構文解析ルーチン(param.c)によって認識される
4つのタイプの行がある。
</para>

<orderedlist>
<listitem><para>
空白行 - 空白のみを含む行。
</para></listitem>
<listitem><para>
コメント行 - セミコロンかシャープ記号で始まる行(';' か '#')。
</para></listitem>
<listitem><para>
セクションヘッダ行 - 左大括弧で始まる行('[')。
</para></listitem>
<listitem><para>
パラメータ行 - その他の文字で始まる行。
(既定値の行タイプ)
</para></listitem>
</orderedlist>

<para>
最初の2つはもっぱら構文解釈ルーチンによって無視される。残りの2つのタイプは、
以下を解釈する。
</para>

<orderedlist>
<listitem><para>
  - セクション名
</para></listitem>
<listitem><para>
  - パラメータ名
</para></listitem>
<listitem><para>
  - パラメータ値
</para></listitem>
</orderedlist>

<para>
パラメータローダ(loadparm.c)にトークンのみが渡される。パラメータ名と値はそれぞれを
等号('=')で分離される。
</para>

<sect2>
<title>空白の取り扱い</title>

<para>
空白は改行文字('\n')以外、isspace()関数(ctype(3C)参照)によって、認識されるすべての
文字として定義される。行末を識別するという理由で、改行は除外される。
</para>

<orderedlist>
<listitem><para>
構文解析ルーチンは行の先頭からの空白を読み飛ばす。
</para></listitem>

<listitem><para>
セクションとパラメータ名は内部に空白を含むことが出来る。名前の中にあるすべての空白は、
単一の空白文字に圧縮される。
</para></listitem>

<listitem><para>
Internal whitespace within a parameter value is kept verbatim with 
the exception of carriage return characters ('\r'), all of which
are removed.
</para></listitem>

<listitem><para>
Leading and trailing whitespace is removed from names and values.
</para></listitem>

</orderedlist>

</sect2>

<sect2>
<title>Handling of Line Continuation</title>

<para>
Long section header and parameter lines may be extended across
multiple lines by use of the backslash character ('\\').  Line
continuation is ignored for blank and comment lines.
</para>

<para>
If the last (non-whitespace) character within a section header or on
a parameter line is a backslash, then the next line will be
(logically) concatonated with the current line by the lexical
analyzer.  For example:
</para>

<para><programlisting>
	param name = parameter value string \
	with line continuation.
</programlisting></para>

<para>Would be read as</para>

<para><programlisting>
    param name = parameter value string     with line continuation.
</programlisting></para>

<para>
Note that there are five spaces following the word 'string',
representing the one space between 'string' and '\\' in the top
line, plus the four preceeding the word 'with' in the second line.
(Yes, I'm counting the indentation.)
</para>

<para>
Line continuation characters are ignored on blank lines and at the end
of comments.  They are *only* recognized within section and parameter
lines.
</para>

</sect2>

<sect2>
<title>Line Continuation Quirks</title>

<para>Note the following example:</para>

<para><programlisting>
	param name = parameter value string \
    \
    with line continuation.
</programlisting></para>

<para>
The middle line is *not* parsed as a blank line because it is first
concatonated with the top line.  The result is
</para>

<para><programlisting>
param name = parameter value string         with line continuation.
</programlisting></para>

<para>The same is true for comment lines.</para>

<para><programlisting>
	param name = parameter value string \
	; comment \
    with a comment.
</programlisting></para>

<para>This becomes:</para>

<para><programlisting>
param name = parameter value string     ; comment     with a comment.
</programlisting></para>

<para>
On a section header line, the closing bracket (']') is considered a
terminating character, and the rest of the line is ignored.  The lines
</para>

<para><programlisting>
	[ section   name ] garbage \
    param  name  = value
</programlisting></para>

<para>are read as</para>

<para><programlisting>
	[section name]
    param name = value
</programlisting></para>

</sect2>
</sect1>

<sect1>
<title>Syntax</title>

<para>The syntax of the smb.conf file is as follows:</para>

<para><programlisting>
  &lt;file&gt;            :==  { &lt;section&gt; } EOF
  &lt;section&gt;         :==  &lt;section header&gt; { &lt;parameter line&gt; }
  &lt;section header&gt;  :==  '[' NAME ']'
  &lt;parameter line&gt;  :==  NAME '=' VALUE NL
</programlisting></para>

<para>Basically, this means that</para>

<orderedlist>
<listitem><para>
	a file is made up of zero or more sections, and is terminated by
	an EOF (we knew that).
</para></listitem>

<listitem><para>
	A section is made up of a section header followed by zero or more
	parameter lines.
</para></listitem>

<listitem><para>
	A section header is identified by an opening bracket and
	terminated by the closing bracket.  The enclosed NAME identifies
	the section.
</para></listitem>

<listitem><para>
	A parameter line is divided into a NAME and a VALUE.  The *first*
	equal sign on the line separates the NAME from the VALUE.  The
	VALUE is terminated by a newline character (NL = '\n').
</para></listitem>

</orderedlist>

<sect2>
<title>About params.c</title>

<para>
The parsing of the config file is a bit unusual if you are used to
lex, yacc, bison, etc.  Both lexical analysis (scanning) and parsing
are performed by params.c.  Values are loaded via callbacks to
loadparm.c.
</para>
</sect2>
</sect1>
</chapter>
