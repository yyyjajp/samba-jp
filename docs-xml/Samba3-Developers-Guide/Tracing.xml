<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Samba-Team//DTD DocBook V4.2-Based Variant V1.0//EN" "http://www.samba.org/samba/DTD/samba-doc">
<chapter id="tracing">
<chapterinfo>
	<author>
		<firstname>Andrew</firstname><surname>Tridgell</surname>
		<affiliation>
			<orgname>Samba Team</orgname>
		</affiliation>
	</author>
</chapterinfo>

<title>Sambaシステムコールのトレース</title>

<para>
このファイルは、どのようにSamba上でのシステムコールトレースを行い、何が問題かを
調べる事について説明している。これは気弱な人のためのものではなく、もしもこれを
読んでいるならば、あなたはおそらくせっぱ詰まっているはずだ。
</para>

<para>
実際、上記で言っているようには、物事はそれほどひどくはなく、ただ出力が汚いだけである :-)
</para>

<para>
ビジネスの話に戻ろう。UNIXシステムのとても大きな利点の1つは、プログラムが行っている
すべてのシステムコールをモニタする事が出来るシステムトレースユーティリティを、ほとんど
すべてのシステムがもっていると言うことである。これは特にデバッグのために使われ、また、
なぜ期待していたよりも遅くしか動かないかという問題を調べる手助けにもなる。特に、
何らかの特別なコンパイルオプションなしに、システムトレースを使うことが出来る。
</para>

<para>
システムトレースユーティリティは異なったシステムでは異なった名前で呼ばれる。Linux
システム上では、straceと呼ばれる。SunOS 4では、traceと呼ばれる。SVR4ベースのシステム
では(solarisを含む)、trussと呼ばれる。多くのBSDシステムではktraceと呼ばれる。
</para>

<para>
最初に行うべき事は、使用しているシステム上でのシステムコールトレースユーティリティの
マニュアルページを読むことである。以下の議論の中で、straceのみがポータブルなシステム
トレースユーティリティ(多くのUNIXマシンで自由に使えるものがある)で、かつ、最も良い
ある種の機能をもっているので、これをstraceと呼ぶ。
</para>

<para>
次に、いくつかの簡単なコマンド上でstraceを使ってみる。例えば、
<command>strace ls</command> か <command>strace echo hello</command>などである。
</para>

<para> 
これが大量の出力を出すことに注意。これは、プログラムが出すすべてのシステムコールに対する
引数とその結果を表示する。システムコールを出さないプログラムは非常に例外的で、そのため
大量の出力が出る。共有ライブラリなどをロードする事を表示することなどの、大量の"前処理"
を生成することにも注意。これは無視すること(それが問題にならない限り!)
</para>

<para>
例えば、<command>strace echo hello</command>中の、真に重要な行に対する出力は以下の
通りである:
</para>

<para><programlisting>
write(1, "hello\n", 6)                  = 6
</programlisting></para>

<para>残りすべてはプログラムを動かすための準備である。</para>

<para>
Ok, now you're familiar with strace. To use it on Samba you need to
strace the running smbd daemon. The way I tend ot use it is to first
login from my Windows PC to the Samba server, then use smbstatus to
find which process ID that client is attached to, then as root I do
<command>strace -p PID</command> to attach to that process. I normally redirect the
stderr output from this command to a file for later perusal. For
example, if I'm using a csh style shell:
</para>

<para><command>strace -f -p 3872 &gt;&amp; strace.out</command></para>

<para>or with a sh style shell:</para>

<para><command>strace -f -p 3872 > strace.out 2&gt;&amp;1</command></para>

<para>
Note the "-f" option. This is only available on some systems, and
allows you to trace not just the current process, but any children it
forks. This is great for finding printing problems caused by the
"print command" being wrong.
</para>

<para>
Once you are attached you then can do whatever it is on the client
that is causing problems and you will capture all the system calls
that smbd makes. 
</para>

<para>
So how do you interpret the results? Generally I search through the
output for strings that I know will appear when the problem
happens. For example, if I am having touble with permissions on a file
I would search for that files name in the strace output and look at
the surrounding lines. Another trick is to match up file descriptor
numbers and "follow" what happens to an open file until it is closed.
</para>

<para>
Beyond this you will have to use your initiative. To give you an idea
of what you are looking for here is a piece of strace output that
shows that <filename>/dev/null</filename> is not world writeable, which
causes printing to fail with Samba:
</para>

<para><programlisting>
[pid 28268] open("/dev/null", O_RDWR)   = -1 EACCES (Permission denied)
[pid 28268] open("/dev/null", O_WRONLY) = -1 EACCES (Permission denied)
</programlisting></para>

<para>
The process is trying to first open <filename>/dev/null</filename> read-write 
then read-only. Both fail. This means <filename>/dev/null</filename> has 
incorrect permissions.
</para>

</chapter>
